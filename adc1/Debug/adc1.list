
adc1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006104  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006358  08006358  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006360  08006360  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006360  08006360  00016360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006364  08006364  00016364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  080063d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080063d8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e815  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d2b  00000000  00000000  0002e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  000305e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  00031290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b723  00000000  00000000  00031e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae86  00000000  00000000  0005d56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011112e  00000000  00000000  000683f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017951f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a0  00000000  00000000  0017959c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080062ac 	.word	0x080062ac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080062ac 	.word	0x080062ac

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fb7d 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f840 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f9a0 	bl	80008f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b0:	f000 f8b6 	bl	8000720 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 80005b4:	f000 f94e 	bl	8000854 <MX_LPUART1_UART_Init>
  MX_DAC1_Init();
 80005b8:	f000 f918 	bl	80007ec <MX_DAC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80005bc:	4815      	ldr	r0, [pc, #84]	; (8000614 <main+0x74>)
 80005be:	f000 ff1b 	bl	80013f8 <HAL_ADC_Start>
	 HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4814      	ldr	r0, [pc, #80]	; (8000618 <main+0x78>)
 80005c6:	f001 fcde 	bl	8001f86 <HAL_DAC_Start>
	  if((HAL_ADC_PollForConversion(&hadc1, 2))==HAL_OK)
 80005ca:	2102      	movs	r1, #2
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <main+0x74>)
 80005ce:	f000 ff76 	bl	80014be <HAL_ADC_PollForConversion>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d105      	bne.n	80005e4 <main+0x44>
	  {
	  value=HAL_ADC_GetValue(&hadc1);
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x74>)
 80005da:	f000 fff8 	bl	80015ce <HAL_ADC_GetValue>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0x7c>)
 80005e2:	601a      	str	r2, [r3, #0]
	  }
	  sprintf((char*)val,"%ld\r\n",value);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <main+0x7c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <main+0x80>)
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0x84>)
 80005ee:	f005 fa57 	bl	8005aa0 <siprintf>
  HAL_UART_Transmit(&hlpuart1, val, sizeof(val), 5);
 80005f2:	2305      	movs	r3, #5
 80005f4:	220a      	movs	r2, #10
 80005f6:	490b      	ldr	r1, [pc, #44]	; (8000624 <main+0x84>)
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0x88>)
 80005fa:	f003 fd0f 	bl	800401c <HAL_UART_Transmit>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, value);
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <main+0x7c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2208      	movs	r2, #8
 8000604:	2100      	movs	r1, #0
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <main+0x78>)
 8000608:	f001 fd0f 	bl	800202a <HAL_DAC_SetValue>
  HAL_Delay(50);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f000 fbb9 	bl	8000d84 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000612:	e7d3      	b.n	80005bc <main+0x1c>
 8000614:	20000138 	.word	0x20000138
 8000618:	20000098 	.word	0x20000098
 800061c:	20000238 	.word	0x20000238
 8000620:	080062c4 	.word	0x080062c4
 8000624:	200001a0 	.word	0x200001a0
 8000628:	200000ac 	.word	0x200000ac

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0bc      	sub	sp, #240	; 0xf0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000636:	2244      	movs	r2, #68	; 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 fa28 	bl	8005a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2294      	movs	r2, #148	; 0x94
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fa1a 	bl	8005a90 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000660:	f001 fffa 	bl	8002658 <HAL_PWREx_ControlVoltageScaling>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x42>
  {
    Error_Handler();
 800066a:	f000 f971 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800066e:	2310      	movs	r3, #16
 8000670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000680:	2360      	movs	r3, #96	; 0x60
 8000682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f895 	bl	80027c0 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800069c:	f000 f958 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fca0 	bl	800300c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d2:	f000 f93d 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_ADC;
 80006d6:	f244 0320 	movw	r3, #16416	; 0x4020
 80006da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006e8:	2301      	movs	r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006f0:	2310      	movs	r3, #16
 80006f2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000704:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f002 ff2f 	bl	800356c <HAL_RCCEx_PeriphCLKConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000714:	f000 f91c 	bl	8000950 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	37f0      	adds	r7, #240	; 0xf0
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000736:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000738:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_ADC1_Init+0xc4>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000744:	2210      	movs	r2, #16
 8000746:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000756:	2204      	movs	r2, #4
 8000758:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000768:	2201      	movs	r2, #1
 800076a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000776:	2201      	movs	r2, #1
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800077c:	2200      	movs	r2, #0
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ADC1_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079c:	4810      	ldr	r0, [pc, #64]	; (80007e0 <MX_ADC1_Init+0xc0>)
 800079e:	f000 fce1 	bl	8001164 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007a8:	f000 f8d2 	bl	8000950 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_ADC1_Init+0xc8>)
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b0:	2306      	movs	r3, #6
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b8:	237f      	movs	r3, #127	; 0x7f
 80007ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007bc:	2304      	movs	r3, #4
 80007be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0xc0>)
 80007ca:	f000 ff0d 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80007d4:	f000 f8bc 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000138 	.word	0x20000138
 80007e4:	50040000 	.word	0x50040000
 80007e8:	04300002 	.word	0x04300002

080007ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2228      	movs	r2, #40	; 0x28
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 f949 	bl	8005a90 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_DAC1_Init+0x60>)
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_DAC1_Init+0x64>)
 8000802:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <MX_DAC1_Init+0x60>)
 8000806:	f001 fb9c 	bl	8001f42 <HAL_DAC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000810:	f000 f89e 	bl	8000950 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_DAC1_Init+0x60>)
 8000834:	f001 fc1e 	bl	8002074 <HAL_DAC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800083e:	f000 f887 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	; 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000098 	.word	0x20000098
 8000850:	40007400 	.word	0x40007400

08000854 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <MX_LPUART1_UART_Init+0x94>)
 800085c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 800089e:	f003 fb6d 	bl	8003f7c <HAL_UART_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a8:	f000 f852 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 80008b0:	f004 ffdf 	bl	8005872 <HAL_UARTEx_SetTxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ba:	f000 f849 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_LPUART1_UART_Init+0x90>)
 80008c2:	f005 f814 	bl	80058ee <HAL_UARTEx_SetRxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 f840 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_LPUART1_UART_Init+0x98>)
 80008d2:	f004 ff95 	bl	8005800 <HAL_UARTEx_DisableFifoMode>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f838 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000ac 	.word	0x200000ac
 80008e8:	40008000 	.word	0x40008000
 80008ec:	200001ac 	.word	0x200001ac

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x5c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <MX_GPIO_Init+0x5c>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x5c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x5c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <MX_GPIO_Init+0x5c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_GPIO_Init+0x5c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_GPIO_Init+0x5c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <MX_GPIO_Init+0x5c>)
 800092c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_GPIO_Init+0x5c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800093e:	f001 ff2f 	bl	80027a0 <HAL_PWREx_EnableVddIO2>

}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x74>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d123      	bne.n	8000a12 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_ADC_MspInit+0x78>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_ADC_MspInit+0x78>)
 80009d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_ADC_MspInit+0x78>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_ADC_MspInit+0x78>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <HAL_ADC_MspInit+0x78>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_ADC_MspInit+0x78>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fa:	2301      	movs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009fe:	230b      	movs	r3, #11
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_ADC_MspInit+0x7c>)
 8000a0e:	f001 fc71 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	50040000 	.word	0x50040000
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000800 	.word	0x48000800

08000a28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <HAL_DAC_MspInit+0x74>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d124      	bne.n	8000a94 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_DAC_MspInit+0x78>)
 8000a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_DAC_MspInit+0x78>)
 8000a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a54:	6593      	str	r3, [r2, #88]	; 0x58
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_DAC_MspInit+0x78>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_DAC_MspInit+0x78>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_DAC_MspInit+0x78>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_DAC_MspInit+0x78>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f001 fc30 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40007400 	.word	0x40007400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d12a      	bne.n	8000b1c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000af6:	f001 fe53 	bl	80027a0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000afa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <HAL_UART_MspInit+0x88>)
 8000b18:	f001 fbec 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40008000 	.word	0x40008000
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48001800 	.word	0x48001800

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 f8e0 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x50>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x16>
		heap_end = &end;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <_sbrk+0x50>)
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <_sbrk+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <_sbrk+0x50>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <_sbrk+0x50>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	466a      	mov	r2, sp
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d907      	bls.n	8000bc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bb6:	f004 ff41 	bl	8005a3c <__errno>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	e006      	b.n	8000bd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <_sbrk+0x50>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <_sbrk+0x50>)
 8000bd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000008c 	.word	0x2000008c
 8000be0:	20000248 	.word	0x20000248

08000be4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <SystemInit+0x64>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <SystemInit+0x64>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <SystemInit+0x68>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <SystemInit+0x68>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <SystemInit+0x68>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <SystemInit+0x68>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <SystemInit+0x68>)
 8000c10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <SystemInit+0x68>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SystemInit+0x68>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <SystemInit+0x68>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <SystemInit+0x68>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SystemInit+0x64>)
 8000c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c56:	e003      	b.n	8000c60 <LoopCopyDataInit>

08000c58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c5e:	3104      	adds	r1, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c68:	d3f6      	bcc.n	8000c58 <CopyDataInit>
	ldr	r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c6c:	e002      	b.n	8000c74 <LoopFillZerobss>

08000c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c70:	f842 3b04 	str.w	r3, [r2], #4

08000c74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <LoopForever+0x16>)
	cmp	r2, r3
 8000c76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c78:	d3f9      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c7a:	f7ff ffb3 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f004 fee3 	bl	8005a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fc8d 	bl	80005a0 <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000c8c:	08006368 	.word	0x08006368
	ldr	r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c94:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000c98:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000c9c:	20000244 	.word	0x20000244

08000ca0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f001 f915 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f80e 	bl	8000cd4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff fe4c 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_InitTick+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d022      	beq.n	8000d2e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_InitTick+0x6c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <HAL_InitTick+0x68>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 f914 	bl	8001f2a <HAL_SYSTICK_Config>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10f      	bne.n	8000d28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d809      	bhi.n	8000d22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	f04f 30ff 	mov.w	r0, #4294967295
 8000d16:	f001 f8ec 	bl	8001ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_InitTick+0x70>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e007      	b.n	8000d32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e004      	b.n	8000d32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
 8000d2c:	e001      	b.n	8000d32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x20>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x1c>)
 8000d58:	6013      	str	r3, [r2, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	2000023c 	.word	0x2000023c
 8000d68:	20000008 	.word	0x20000008

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000023c 	.word	0x2000023c

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d004      	beq.n	8000da8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_Delay+0x40>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4413      	add	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da8:	bf00      	nop
 8000daa:	f7ff ffdf 	bl	8000d6c <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d8f7      	bhi.n	8000daa <HAL_Delay+0x26>
  {
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	609a      	str	r2, [r3, #8]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e30:	b490      	push	{r4, r7}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3360      	adds	r3, #96	; 0x60
 8000e42:	461a      	mov	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000e4c:	6822      	ldr	r2, [r4, #0]
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <LL_ADC_SetOffset+0x40>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e62:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc90      	pop	{r4, r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	03fff000 	.word	0x03fff000

08000e74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3360      	adds	r3, #96	; 0x60
 8000e82:	461a      	mov	r2, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc90      	pop	{r4, r7}
 8000e9a:	4770      	bx	lr

08000e9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e9c:	b490      	push	{r4, r7}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3360      	adds	r3, #96	; 0x60
 8000eac:	461a      	mov	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc90      	pop	{r4, r7}
 8000eca:	4770      	bx	lr

08000ecc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	615a      	str	r2, [r3, #20]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f18:	b490      	push	{r4, r7}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3330      	adds	r3, #48	; 0x30
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	4413      	add	r3, r2
 8000f36:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f38:	6822      	ldr	r2, [r4, #0]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	211f      	movs	r1, #31
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	0e9b      	lsrs	r3, r3, #26
 8000f4e:	f003 011f 	and.w	r1, r3, #31
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc90      	pop	{r4, r7}
 8000f68:	4770      	bx	lr

08000f6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f6a:	b490      	push	{r4, r7}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3314      	adds	r3, #20
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	0e5b      	lsrs	r3, r3, #25
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	0d1b      	lsrs	r3, r3, #20
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2107      	movs	r1, #7
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	0d1b      	lsrs	r3, r3, #20
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc90      	pop	{r4, r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0318 	and.w	r3, r3, #24
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fe0:	40d9      	lsrs	r1, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	400b      	ands	r3, r1
 8000fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	0007ffff 	.word	0x0007ffff

08001004 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6093      	str	r3, [r2, #8]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800103c:	d101      	bne.n	8001042 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001064:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800108c:	d101      	bne.n	8001092 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <LL_ADC_IsEnabled+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_ADC_IsEnabled+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001102:	f043 0204 	orr.w	r2, r3, #4
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b04      	cmp	r3, #4
 8001128:	d101      	bne.n	800112e <LL_ADC_REG_IsConversionOngoing+0x18>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b08      	cmp	r3, #8
 800114e:	d101      	bne.n	8001154 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e12d      	b.n	80013da <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fc0b 	bl	80009a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff3f 	bl	8001028 <LL_ADC_IsDeepPowerDownEnabled>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff25 	bl	8001004 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff5a 	bl	8001078 <LL_ADC_IsInternalRegulatorEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d113      	bne.n	80011f2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff3e 	bl	8001050 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <HAL_ADC_Init+0x280>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	4a83      	ldr	r2, [pc, #524]	; (80013e8 <HAL_ADC_Init+0x284>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e4:	e002      	b.n	80011ec <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff3e 	bl	8001078 <LL_ADC_IsInternalRegulatorEnabled>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10d      	bne.n	800121e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f043 0210 	orr.w	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff77 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 8001228:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 80c8 	bne.w	80013c8 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80c4 	bne.w	80013c8 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001248:	f043 0202 	orr.w	r2, r3, #2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff37 	bl	80010c8 <LL_ADC_IsEnabled>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10b      	bne.n	8001278 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001260:	4862      	ldr	r0, [pc, #392]	; (80013ec <HAL_ADC_Init+0x288>)
 8001262:	f7ff ff31 	bl	80010c8 <LL_ADC_IsEnabled>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d105      	bne.n	8001278 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4619      	mov	r1, r3
 8001272:	485f      	ldr	r0, [pc, #380]	; (80013f0 <HAL_ADC_Init+0x28c>)
 8001274:	f7ff fda8 	bl	8000dc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e5b      	ldrb	r3, [r3, #25]
 800127c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001282:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001288:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800128e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001296:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d106      	bne.n	80012b4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	3b01      	subs	r3, #1
 80012ac:	045b      	lsls	r3, r3, #17
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <HAL_ADC_Init+0x290>)
 80012d8:	4013      	ands	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	69b9      	ldr	r1, [r7, #24]
 80012e0:	430b      	orrs	r3, r1
 80012e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff14 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 80012ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff21 	bl	800113c <LL_ADC_INJ_IsConversionOngoing>
 80012fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d140      	bne.n	8001384 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d13d      	bne.n	8001384 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001312:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800131a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800132a:	f023 0306 	bic.w	r3, r3, #6
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	430b      	orrs	r3, r1
 8001336:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800133e:	2b01      	cmp	r3, #1
 8001340:	d118      	bne.n	8001374 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800135e:	4311      	orrs	r1, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001364:	430a      	orrs	r2, r1
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	e007      	b.n	8001384 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d10c      	bne.n	80013a6 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f023 010f 	bic.w	r1, r3, #15
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
 80013a4:	e007      	b.n	80013b6 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 020f 	bic.w	r2, r2, #15
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	659a      	str	r2, [r3, #88]	; 0x58
 80013c6:	e007      	b.n	80013d8 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	f043 0210 	orr.w	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000
 80013e8:	053e2d63 	.word	0x053e2d63
 80013ec:	50040000 	.word	0x50040000
 80013f0:	50040300 	.word	0x50040300
 80013f4:	fff0c007 	.word	0xfff0c007

080013f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe86 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d14f      	bne.n	80014b0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_ADC_Start+0x26>
 800141a:	2302      	movs	r3, #2
 800141c:	e04b      	b.n	80014b6 <HAL_ADC_Start+0xbe>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fc4c 	bl	8001cc4 <ADC_Enable>
 800142c:	4603      	mov	r3, r0
 800142e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d137      	bne.n	80014a6 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800143e:	f023 0301 	bic.w	r3, r3, #1
 8001442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001456:	d106      	bne.n	8001466 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	f023 0206 	bic.w	r2, r3, #6
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	65da      	str	r2, [r3, #92]	; 0x5c
 8001464:	e002      	b.n	800146c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	221c      	movs	r2, #28
 8001472:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe25 	bl	80010ee <LL_ADC_REG_StartConversion>
 80014a4:	e006      	b.n	80014b4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80014ae:	e001      	b.n	80014b4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014b0:	2302      	movs	r3, #2
 80014b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d102      	bne.n	80014d6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80014d0:	2308      	movs	r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e010      	b.n	80014f8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f043 0220 	orr.w	r2, r3, #32
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e068      	b.n	80015c6 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80014f4:	2304      	movs	r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014f8:	f7ff fc38 	bl	8000d6c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014fe:	e01a      	b.n	8001536 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001506:	d016      	beq.n	8001536 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001508:	f7ff fc30 	bl	8000d6c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d302      	bcc.n	800151e <HAL_ADC_PollForConversion+0x60>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e047      	b.n	80015c6 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0dd      	beq.n	8001500 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fccc 	bl	8000ef2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01c      	beq.n	800159a <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e5b      	ldrb	r3, [r3, #25]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d118      	bne.n	800159a <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b08      	cmp	r3, #8
 8001574:	d111      	bne.n	800159a <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d104      	bne.n	80015b2 <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2208      	movs	r2, #8
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e008      	b.n	80015c4 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	220c      	movs	r2, #12
 80015c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0a6      	sub	sp, #152	; 0x98
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADC_ConfigChannel+0x22>
 8001606:	2302      	movs	r3, #2
 8001608:	e352      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x6c8>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd7d 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8337 	bne.w	8001c92 <HAL_ADC_ConfigChannel+0x6aa>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d824      	bhi.n	8001676 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	3b02      	subs	r3, #2
 8001632:	2b03      	cmp	r3, #3
 8001634:	d81b      	bhi.n	800166e <HAL_ADC_ConfigChannel+0x86>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <HAL_ADC_ConfigChannel+0x54>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001655 	.word	0x08001655
 8001644:	0800165d 	.word	0x0800165d
 8001648:	08001665 	.word	0x08001665
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	220c      	movs	r2, #12
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	e011      	b.n	8001678 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2212      	movs	r2, #18
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e00d      	b.n	8001678 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2218      	movs	r2, #24
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e009      	b.n	8001678 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	e004      	b.n	8001678 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2206      	movs	r2, #6
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	e000      	b.n	8001678 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001676:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	f7ff fc47 	bl	8000f18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd41 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 8001694:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd4d 	bl	800113c <LL_ADC_INJ_IsConversionOngoing>
 80016a2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 8163 	bne.w	8001976 <HAL_ADC_ConfigChannel+0x38e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 815e 	bne.w	8001976 <HAL_ADC_ConfigChannel+0x38e>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c2:	d10f      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fc4b 	bl	8000f6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fbf5 	bl	8000ecc <LL_ADC_SetSamplingTimeCommonConfig>
 80016e2:	e00e      	b.n	8001702 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6819      	ldr	r1, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	461a      	mov	r2, r3
 80016f2:	f7ff fc3a 	bl	8000f6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fbe5 	bl	8000ecc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d00a      	beq.n	800173a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6919      	ldr	r1, [r3, #16]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001734:	f7ff fb7c 	bl	8000e30 <LL_ADC_SetOffset>
 8001738:	e11d      	b.n	8001976 <HAL_ADC_ConfigChannel+0x38e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb97 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x17e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb8c 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	e012      	b.n	800178c <HAL_ADC_ConfigChannel+0x1a4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb81 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x1bc>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	e00a      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1d2>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80017b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d106      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fb68 	bl	8000e9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fb4e 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10a      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x210>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fb43 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	f003 021f 	and.w	r2, r3, #31
 80017f6:	e010      	b.n	800181a <HAL_ADC_ConfigChannel+0x232>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fb38 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x24a>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0e9b      	lsrs	r3, r3, #26
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	e00a      	b.n	8001848 <HAL_ADC_ConfigChannel+0x260>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	429a      	cmp	r2, r3
 800184a:	d106      	bne.n	800185a <HAL_ADC_ConfigChannel+0x272>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	2101      	movs	r1, #1
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fb21 	bl	8000e9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2102      	movs	r1, #2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fb07 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10a      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x29e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2102      	movs	r1, #2
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fafc 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	e010      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x2c0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2102      	movs	r1, #2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff faf1 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800189e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x2d8>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0e9b      	lsrs	r3, r3, #26
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	e00a      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x2ee>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x300>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	2102      	movs	r1, #2
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fada 	bl	8000e9c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2103      	movs	r1, #3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fac0 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x32c>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2103      	movs	r1, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fab5 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 021f 	and.w	r2, r3, #31
 8001912:	e010      	b.n	8001936 <HAL_ADC_ConfigChannel+0x34e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2103      	movs	r1, #3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff faaa 	bl	8000e74 <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800192c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <HAL_ADC_ConfigChannel+0x366>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	e00a      	b.n	8001964 <HAL_ADC_ConfigChannel+0x37c>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800195c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	429a      	cmp	r2, r3
 8001966:	d106      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	2103      	movs	r1, #3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fa93 	bl	8000e9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fba4 	bl	80010c8 <LL_ADC_IsEnabled>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	f040 810c 	bne.w	8001ba0 <HAL_ADC_ConfigChannel+0x5b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	461a      	mov	r2, r3
 8001996:	f7ff fb11 	bl	8000fbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4aa8      	ldr	r2, [pc, #672]	; (8001c40 <HAL_ADC_ConfigChannel+0x658>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	f040 80fd 	bne.w	8001ba0 <HAL_ADC_ConfigChannel+0x5b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x3e6>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	3301      	adds	r3, #1
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b09      	cmp	r3, #9
 80019c4:	bf94      	ite	ls
 80019c6:	2301      	movls	r3, #1
 80019c8:	2300      	movhi	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	e012      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x40c>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80019dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	bf94      	ite	ls
 80019ee:	2301      	movls	r3, #1
 80019f0:	2300      	movhi	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d064      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x4da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x42c>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	069b      	lsls	r3, r3, #26
 8001a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a12:	e00e      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x44a>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	069b      	lsls	r3, r3, #26
 8001a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x46a>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	3301      	adds	r3, #1
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	e010      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x48c>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f003 031f 	and.w	r3, r3, #31
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	ea42 0103 	orr.w	r1, r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x4b2>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0e9b      	lsrs	r3, r3, #26
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	051b      	lsls	r3, r3, #20
 8001a98:	e011      	b.n	8001abe <HAL_ADC_ConfigChannel+0x4d6>
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	e069      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x5ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x4f6>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0e9b      	lsrs	r3, r3, #26
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	069b      	lsls	r3, r3, #26
 8001ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001adc:	e00e      	b.n	8001afc <HAL_ADC_ConfigChannel+0x514>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	61fb      	str	r3, [r7, #28]
  return result;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	069b      	lsls	r3, r3, #26
 8001af8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x534>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0e9b      	lsrs	r3, r3, #26
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	e010      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x556>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	617b      	str	r3, [r7, #20]
  return result;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3301      	adds	r3, #1
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	ea42 0103 	orr.w	r1, r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x582>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0e9b      	lsrs	r3, r3, #26
 8001b54:	3301      	adds	r3, #1
 8001b56:	f003 021f 	and.w	r2, r3, #31
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b1e      	subs	r3, #30
 8001b62:	051b      	lsls	r3, r3, #20
 8001b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b68:	e014      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x5ac>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  return result;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	f003 021f 	and.w	r2, r3, #31
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b94:	430b      	orrs	r3, r1
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	6892      	ldr	r2, [r2, #8]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff f9e5 	bl	8000f6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_ADC_ConfigChannel+0x65c>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d07b      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bac:	4826      	ldr	r0, [pc, #152]	; (8001c48 <HAL_ADC_ConfigChannel+0x660>)
 8001bae:	f7ff f931 	bl	8000e14 <LL_ADC_GetCommonPathInternalCh>
 8001bb2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a24      	ldr	r2, [pc, #144]	; (8001c4c <HAL_ADC_ConfigChannel+0x664>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d126      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x626>
 8001bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d120      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x626>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_ADC_ConfigChannel+0x668>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d166      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bde:	4619      	mov	r1, r3
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <HAL_ADC_ConfigChannel+0x660>)
 8001be2:	f7ff f904 	bl	8000dee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_ADC_ConfigChannel+0x66c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_ADC_ConfigChannel+0x670>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	099a      	lsrs	r2, r3, #6
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001bfe:	e002      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x61e>
          {
            wait_loop_index--;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f9      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x618>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c0c:	e04a      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <HAL_ADC_ConfigChannel+0x674>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d123      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x678>
 8001c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d11d      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_ADC_ConfigChannel+0x668>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d13a      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	4619      	mov	r1, r3
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <HAL_ADC_ConfigChannel+0x660>)
 8001c3a:	f7ff f8d8 	bl	8000dee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c3e:	e031      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
 8001c40:	407f0000 	.word	0x407f0000
 8001c44:	80080000 	.word	0x80080000
 8001c48:	50040300 	.word	0x50040300
 8001c4c:	c7520000 	.word	0xc7520000
 8001c50:	50040000 	.word	0x50040000
 8001c54:	20000000 	.word	0x20000000
 8001c58:	053e2d63 	.word	0x053e2d63
 8001c5c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_ADC_ConfigChannel+0x6d0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d11c      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_ADC_ConfigChannel+0x6d4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <HAL_ADC_ConfigChannel+0x6d8>)
 8001c8c:	f7ff f8af 	bl	8000dee <LL_ADC_SetCommonPathInternalCh>
 8001c90:	e008      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x6bc>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	f043 0220 	orr.w	r2, r3, #32
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001cac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3798      	adds	r7, #152	; 0x98
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	80000001 	.word	0x80000001
 8001cbc:	50040000 	.word	0x50040000
 8001cc0:	50040300 	.word	0x50040300

08001cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f9f9 	bl	80010c8 <LL_ADC_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d146      	bne.n	8001d6a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <ADC_Enable+0xb0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00d      	beq.n	8001d06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e032      	b.n	8001d6c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f9c8 	bl	80010a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001d10:	f7ff f82c 	bl	8000d6c <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d16:	e021      	b.n	8001d5c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f9d3 	bl	80010c8 <LL_ADC_IsEnabled>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f9b7 	bl	80010a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d32:	f7ff f81b 	bl	8000d6c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d90d      	bls.n	8001d5c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d1d6      	bne.n	8001d18 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	8000003f 	.word	0x8000003f

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff8e 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff47 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff5c 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff8e 	bl	8001e30 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffb0 	bl	8001e98 <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e014      	b.n	8001f7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	791b      	ldrb	r3, [r3, #4]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe fd5f 	bl	8000a28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	795b      	ldrb	r3, [r3, #5]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_DAC_Start+0x16>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e040      	b.n	800201e <HAL_DAC_Start+0x98>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6819      	ldr	r1, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10f      	bne.n	8001fe6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d11d      	bne.n	8002010 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	e014      	b.n	8002010 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0202 	orr.w	r2, r2, #2
 800200e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800202a:	b480      	push	{r7}
 800202c:	b087      	sub	sp, #28
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3308      	adds	r3, #8
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e004      	b.n	800205e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	3314      	adds	r3, #20
 800205c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	461a      	mov	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	795b      	ldrb	r3, [r3, #5]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_DAC_ConfigChannel+0x1c>
 800208c:	2302      	movs	r3, #2
 800208e:	e12a      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x272>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2202      	movs	r2, #2
 800209a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d174      	bne.n	800218e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d137      	bne.n	800211a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fe5f 	bl	8000d6c <HAL_GetTick>
 80020ae:	61b8      	str	r0, [r7, #24]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020b0:	e011      	b.n	80020d6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020b2:	f7fe fe5b 	bl	8000d6c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d90a      	bls.n	80020d6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f043 0208 	orr.w	r2, r3, #8
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2203      	movs	r2, #3
 80020d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e107      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e6      	bne.n	80020b2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7fe fe4d 	bl	8000d84 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	69d2      	ldr	r2, [r2, #28]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
 80020f4:	e01e      	b.n	8002134 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020f6:	f7fe fe39 	bl	8000d6c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d90a      	bls.n	800211a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f043 0208 	orr.w	r2, r3, #8
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2203      	movs	r2, #3
 8002114:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0e5      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2b00      	cmp	r3, #0
 8002122:	dbe8      	blt.n	80020f6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe fe2d 	bl	8000d84 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	69d2      	ldr	r2, [r2, #28]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	ea02 0103 	and.w	r1, r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	21ff      	movs	r1, #255	; 0xff
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	ea02 0103 	and.w	r1, r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11d      	bne.n	80021d2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	61fb      	str	r3, [r7, #28]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	221f      	movs	r2, #31
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61fb      	str	r3, [r7, #28]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2207      	movs	r2, #7
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	4313      	orrs	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	f640 72fe 	movw	r2, #4094	; 0xffe
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	4013      	ands	r3, r2
 8002254:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	4313      	orrs	r3, r2
 800226c:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002276:	d104      	bne.n	8002282 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	e018      	b.n	80022b4 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e00f      	b.n	80022b4 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002294:	f001 f870 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8002298:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_DAC_ConfigChannel+0x27c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d904      	bls.n	80022ac <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e003      	b.n	80022b4 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80022b2:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6819      	ldr	r1, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	22c0      	movs	r2, #192	; 0xc0
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	04c4b400 	.word	0x04c4b400

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e166      	b.n	80025d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8158 	beq.w	80025cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d00b      	beq.n	800233c <HAL_GPIO_Init+0x48>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002330:	2b11      	cmp	r3, #17
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d130      	bne.n	800239e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002372:	2201      	movs	r2, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0xea>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d123      	bne.n	8002426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	08da      	lsrs	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3208      	adds	r2, #8
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	08da      	lsrs	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3208      	adds	r2, #8
 8002420:	6939      	ldr	r1, [r7, #16]
 8002422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0203 	and.w	r2, r3, #3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80b2 	beq.w	80025cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002468:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_GPIO_Init+0x2fc>)
 800246a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_GPIO_Init+0x2fc>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6613      	str	r3, [r2, #96]	; 0x60
 8002474:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <HAL_GPIO_Init+0x2fc>)
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002480:	4a5c      	ldr	r2, [pc, #368]	; (80025f4 <HAL_GPIO_Init+0x300>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024aa:	d02b      	beq.n	8002504 <HAL_GPIO_Init+0x210>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_GPIO_Init+0x304>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d025      	beq.n	8002500 <HAL_GPIO_Init+0x20c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_GPIO_Init+0x308>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d01f      	beq.n	80024fc <HAL_GPIO_Init+0x208>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_GPIO_Init+0x30c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d019      	beq.n	80024f8 <HAL_GPIO_Init+0x204>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a4f      	ldr	r2, [pc, #316]	; (8002604 <HAL_GPIO_Init+0x310>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_GPIO_Init+0x200>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4e      	ldr	r2, [pc, #312]	; (8002608 <HAL_GPIO_Init+0x314>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1fc>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_GPIO_Init+0x318>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1f8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_GPIO_Init+0x31c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1f4>
 80024e4:	2307      	movs	r3, #7
 80024e6:	e00e      	b.n	8002506 <HAL_GPIO_Init+0x212>
 80024e8:	2308      	movs	r3, #8
 80024ea:	e00c      	b.n	8002506 <HAL_GPIO_Init+0x212>
 80024ec:	2306      	movs	r3, #6
 80024ee:	e00a      	b.n	8002506 <HAL_GPIO_Init+0x212>
 80024f0:	2305      	movs	r3, #5
 80024f2:	e008      	b.n	8002506 <HAL_GPIO_Init+0x212>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x212>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x212>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x212>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x212>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002516:	4937      	ldr	r1, [pc, #220]	; (80025f4 <HAL_GPIO_Init+0x300>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_GPIO_Init+0x320>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002548:	4a32      	ldr	r2, [pc, #200]	; (8002614 <HAL_GPIO_Init+0x320>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800254e:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_GPIO_Init+0x320>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002572:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_GPIO_Init+0x320>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_GPIO_Init+0x320>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800259c:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_GPIO_Init+0x320>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_GPIO_Init+0x320>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025c6:	4a13      	ldr	r2, [pc, #76]	; (8002614 <HAL_GPIO_Init+0x320>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f ae91 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000800 	.word	0x48000800
 8002600:	48000c00 	.word	0x48000c00
 8002604:	48001000 	.word	0x48001000
 8002608:	48001400 	.word	0x48001400
 800260c:	48001800 	.word	0x48001800
 8002610:	48001c00 	.word	0x48001c00
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_PWREx_GetVoltageRange+0x3c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d102      	bne.n	8002630 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800262a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800262e:	e00b      	b.n	8002648 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263e:	d102      	bne.n	8002646 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	e000      	b.n	8002648 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002646:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40007000 	.word	0x40007000

08002658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d141      	bne.n	80026ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002666:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d131      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800267a:	4a46      	ldr	r2, [pc, #280]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002684:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800268c:	4a41      	ldr	r2, [pc, #260]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002694:	4b40      	ldr	r3, [pc, #256]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2232      	movs	r2, #50	; 0x32
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	0c9b      	lsrs	r3, r3, #18
 80026a6:	3301      	adds	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026aa:	e002      	b.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026be:	d102      	bne.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f2      	bne.n	80026ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026c6:	4b33      	ldr	r3, [pc, #204]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d158      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e057      	b.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026de:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026e8:	e04d      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d141      	bne.n	8002776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d131      	bne.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002706:	4a23      	ldr	r2, [pc, #140]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800271e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2232      	movs	r2, #50	; 0x32
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a1c      	ldr	r2, [pc, #112]	; (800279c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	3301      	adds	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002736:	e002      	b.n	800273e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3b01      	subs	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d102      	bne.n	8002752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f2      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d112      	bne.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e011      	b.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002774:	e007      	b.n	8002786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002784:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40007000 	.word	0x40007000
 8002798:	20000000 	.word	0x20000000
 800279c:	431bde83 	.word	0x431bde83

080027a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80027aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ae:	6053      	str	r3, [r2, #4]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40007000 	.word	0x40007000

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f000 bc16 	b.w	8003000 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d4:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027de:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80e4 	beq.w	80029be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_RCC_OscConfig+0x4c>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	f040 808b 	bne.w	800291a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 8087 	bne.w	800291a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_OscConfig+0x64>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e3ed      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_RCC_OscConfig+0x7e>
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	e005      	b.n	800284a <HAL_RCC_OscConfig+0x8a>
 800283e:	4b86      	ldr	r3, [pc, #536]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284a:	4293      	cmp	r3, r2
 800284c:	d223      	bcs.n	8002896 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fdc8 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e3ce      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002862:	4b7d      	ldr	r3, [pc, #500]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7c      	ldr	r2, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b7a      	ldr	r3, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4977      	ldr	r1, [pc, #476]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4972      	ldr	r1, [pc, #456]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e025      	b.n	80028e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002896:	4b70      	ldr	r3, [pc, #448]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6f      	ldr	r2, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800289c:	f043 0308 	orr.w	r3, r3, #8
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b6d      	ldr	r3, [pc, #436]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	496a      	ldr	r1, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	4965      	ldr	r1, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fd88 	bl	80033e8 <RCC_SetFlashLatencyFromMSIRange>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e38e      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e2:	f000 fcbf 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	4a5a      	ldr	r2, [pc, #360]	; (8002a5c <HAL_RCC_OscConfig+0x29c>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	fa21 f303 	lsr.w	r3, r1, r3
 80028fe:	4a58      	ldr	r2, [pc, #352]	; (8002a60 <HAL_RCC_OscConfig+0x2a0>)
 8002900:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002902:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x2a4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe f9e4 	bl	8000cd4 <HAL_InitTick>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d052      	beq.n	80029bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	e372      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d032      	beq.n	8002988 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002922:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800292e:	f7fe fa1d 	bl	8000d6c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002936:	f7fe fa19 	bl	8000d6c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e35b      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002948:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800295a:	f043 0308 	orr.w	r3, r3, #8
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	493a      	ldr	r1, [pc, #232]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	4935      	ldr	r1, [pc, #212]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
 8002986:	e01a      	b.n	80029be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002988:	4b33      	ldr	r3, [pc, #204]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a32      	ldr	r2, [pc, #200]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002994:	f7fe f9ea 	bl	8000d6c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800299c:	f7fe f9e6 	bl	8000d6c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e328      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ae:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1dc>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d073      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_OscConfig+0x21c>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d10e      	bne.n	80029f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d10b      	bne.n	80029f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d063      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d15f      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e305      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x24c>
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e01d      	b.n	8002a48 <HAL_RCC_OscConfig+0x288>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x270>
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e00b      	b.n	8002a48 <HAL_RCC_OscConfig+0x288>
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <HAL_RCC_OscConfig+0x298>)
 8002a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe f98c 	bl	8000d6c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a56:	e010      	b.n	8002a7a <HAL_RCC_OscConfig+0x2ba>
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	080062dc 	.word	0x080062dc
 8002a60:	20000000 	.word	0x20000000
 8002a64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe f980 	bl	8000d6c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2c2      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7a:	4baf      	ldr	r3, [pc, #700]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2a8>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe f970 	bl	8000d6c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe f96c 	bl	8000d6c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e2ae      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa2:	4ba5      	ldr	r3, [pc, #660]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d0>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x310>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d119      	bne.n	8002afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d116      	bne.n	8002afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad0:	4b99      	ldr	r3, [pc, #612]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x328>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e28b      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b93      	ldr	r3, [pc, #588]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	4990      	ldr	r1, [pc, #576]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002afc:	e040      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d023      	beq.n	8002b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b06:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a8b      	ldr	r2, [pc, #556]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe f92b 	bl	8000d6c <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe f927 	bl	8000d6c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e269      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b2c:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b38:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	497c      	ldr	r1, [pc, #496]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
 8002b4c:	e018      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a79      	ldr	r2, [pc, #484]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe f907 	bl	8000d6c <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fe f903 	bl	8000d6c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e245      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b74:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d03c      	beq.n	8002c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f8e2 	bl	8000d6c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe f8de 	bl	8000d6c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e220      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bbe:	4b5e      	ldr	r3, [pc, #376]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCC_OscConfig+0x3ec>
 8002bcc:	e01b      	b.n	8002c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bce:	4b5a      	ldr	r3, [pc, #360]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe f8c5 	bl	8000d6c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe f8c1 	bl	8000d6c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e203      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bf8:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a6 	beq.w	8002d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c18:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a43      	ldr	r2, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <HAL_RCC_OscConfig+0x57c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d118      	bne.n	8002c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x57c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3a      	ldr	r2, [pc, #232]	; (8002d3c <HAL_RCC_OscConfig+0x57c>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c58:	f7fe f888 	bl	8000d6c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe f884 	bl	8000d6c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e1c6      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c72:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <HAL_RCC_OscConfig+0x57c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4d8>
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c96:	e024      	b.n	8002ce2 <HAL_RCC_OscConfig+0x522>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d110      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x502>
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc0:	e00f      	b.n	8002ce2 <HAL_RCC_OscConfig+0x522>
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe f83f 	bl	8000d6c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe f83b 	bl	8000d6c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e17b      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ed      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x532>
 8002d16:	e01a      	b.n	8002d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe f828 	bl	8000d6c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1e:	e00f      	b.n	8002d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe f824 	bl	8000d6c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d906      	bls.n	8002d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e164      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	4ba8      	ldr	r3, [pc, #672]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e8      	bne.n	8002d20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4e:	7ffb      	ldrb	r3, [r7, #31]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4ba3      	ldr	r3, [pc, #652]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	4aa2      	ldr	r2, [pc, #648]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d74:	4b9b      	ldr	r3, [pc, #620]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d7a:	4a9a      	ldr	r2, [pc, #616]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fd fff2 	bl	8000d6c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d8c:	f7fd ffee 	bl	8000d6c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e130      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d9e:	4b91      	ldr	r3, [pc, #580]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x5cc>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db4:	4a8b      	ldr	r2, [pc, #556]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fd ffd5 	bl	8000d6c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc6:	f7fd ffd1 	bl	8000d6c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e113      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd8:	4b82      	ldr	r3, [pc, #520]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8107 	beq.w	8002ffe <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	f040 80cb 	bne.w	8002f90 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 0203 	and.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d12c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d123      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d11b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d113      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d109      	bne.n	8002e68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d06d      	beq.n	8002f44 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d068      	beq.n	8002f40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e7a:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0ba      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a55      	ldr	r2, [pc, #340]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e96:	f7fd ff69 	bl	8000d6c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fd ff65 	bl	8000d6c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0a7      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb0:	4b4c      	ldr	r3, [pc, #304]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ebc:	4b49      	ldr	r3, [pc, #292]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <HAL_RCC_OscConfig+0x828>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	4311      	orrs	r1, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed6:	0212      	lsls	r2, r2, #8
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	0552      	lsls	r2, r2, #21
 8002ee4:	4311      	orrs	r1, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0652      	lsls	r2, r2, #25
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef6:	06d2      	lsls	r2, r2, #27
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	493a      	ldr	r1, [pc, #232]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f00:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a34      	ldr	r2, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f18:	f7fd ff28 	bl	8000d6c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fd ff24 	bl	8000d6c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e066      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f3e:	e05e      	b.n	8002ffe <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e05d      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d156      	bne.n	8002ffe <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a23      	ldr	r2, [pc, #140]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f68:	f7fd ff00 	bl	8000d6c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fd fefc 	bl	8000d6c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e03e      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x7b0>
 8002f8e:	e036      	b.n	8002ffe <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d031      	beq.n	8002ffa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fb4:	f023 0303 	bic.w	r3, r3, #3
 8002fb8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_RCC_OscConfig+0x824>)
 8002fc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fd fecf 	bl	8000d6c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	e00c      	b.n	8002fec <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fd fecb 	bl	8000d6c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d905      	bls.n	8002fec <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e00d      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_OscConfig+0x848>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ec      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x812>
 8002ff8:	e001      	b.n	8002ffe <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e10f      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b86      	ldr	r3, [pc, #536]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 020f 	bic.w	r2, r3, #15
 800303a:	4984      	ldr	r1, [pc, #528]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0f7      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8089 	beq.w	8003174 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d133      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	4b79      	ldr	r3, [pc, #484]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0e4      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800307a:	f000 fa0f 	bl	800349c <RCC_GetSysClockFreqFromPLLSource>
 800307e:	4602      	mov	r2, r0
 8003080:	4b74      	ldr	r3, [pc, #464]	; (8003254 <HAL_RCC_ClockConfig+0x248>)
 8003082:	429a      	cmp	r2, r3
 8003084:	d955      	bls.n	8003132 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003086:	4b72      	ldr	r3, [pc, #456]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309a:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e044      	b.n	8003132 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d03e      	beq.n	8003132 <HAL_RCC_ClockConfig+0x126>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d13a      	bne.n	8003132 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c4:	4a62      	ldr	r2, [pc, #392]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e02f      	b.n	8003132 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0ac      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a0      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003102:	4b53      	ldr	r3, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e098      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003112:	f000 f8a7 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b4e      	ldr	r3, [pc, #312]	; (8003254 <HAL_RCC_ClockConfig+0x248>)
 800311a:	429a      	cmp	r2, r3
 800311c:	d909      	bls.n	8003132 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003126:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4944      	ldr	r1, [pc, #272]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fd fe12 	bl	8000d6c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd fe0e 	bl	8000d6c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e070      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
 8003192:	e008      	b.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031a4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d210      	bcs.n	80031d6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 020f 	bic.w	r2, r3, #15
 80031bc:	4923      	ldr	r1, [pc, #140]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e036      	b.n	8003244 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d008      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4918      	ldr	r1, [pc, #96]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d009      	beq.n	8003214 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4910      	ldr	r1, [pc, #64]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003214:	f000 f826 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8003218:	4601      	mov	r1, r0
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_RCC_ClockConfig+0x24c>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x250>)
 8003232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x254>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fd4b 	bl	8000cd4 <HAL_InitTick>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

  return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40022000 	.word	0x40022000
 8003250:	40021000 	.word	0x40021000
 8003254:	04c4b400 	.word	0x04c4b400
 8003258:	080062dc 	.word	0x080062dc
 800325c:	20000000 	.word	0x20000000
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x34>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003298:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	e004      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d133      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0xa4>
 8003302:	2b03      	cmp	r3, #3
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0xaa>
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_RCC_GetSysClockFreq+0x10c>)
 800330a:	617b      	str	r3, [r7, #20]
      break;
 800330c:	e005      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_GetSysClockFreq+0x110>)
 8003310:	617b      	str	r3, [r7, #20]
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	617b      	str	r3, [r7, #20]
      break;
 8003318:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	3301      	adds	r3, #1
 8003326:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	fb02 f203 	mul.w	r2, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_GetSysClockFreq+0x104>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0e5b      	lsrs	r3, r3, #25
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	3301      	adds	r3, #1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800335a:	69bb      	ldr	r3, [r7, #24]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3724      	adds	r7, #36	; 0x24
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40021000 	.word	0x40021000
 800336c:	080062f4 	.word	0x080062f4
 8003370:	00f42400 	.word	0x00f42400
 8003374:	007a1200 	.word	0x007a1200

08003378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_GetHCLKFreq+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003394:	f7ff fff0 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 8003398:	4601      	mov	r1, r0
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	080062ec 	.word	0x080062ec

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033c0:	f7ff ffda 	bl	8003378 <HAL_RCC_GetHCLKFreq>
 80033c4:	4601      	mov	r1, r0
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	080062ec 	.word	0x080062ec

080033e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003400:	f7ff f90a 	bl	8002618 <HAL_PWREx_GetVoltageRange>
 8003404:	6178      	str	r0, [r7, #20]
 8003406:	e014      	b.n	8003432 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	4a21      	ldr	r2, [pc, #132]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	6593      	str	r3, [r2, #88]	; 0x58
 8003414:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003420:	f7ff f8fa 	bl	8002618 <HAL_PWREx_GetVoltageRange>
 8003424:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d10b      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d913      	bls.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2ba0      	cmp	r3, #160	; 0xa0
 8003444:	d902      	bls.n	800344c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003446:	2302      	movs	r3, #2
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	e00d      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e00a      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b7f      	cmp	r3, #127	; 0x7f
 8003456:	d902      	bls.n	800345e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003458:	2302      	movs	r3, #2
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	e004      	b.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d101      	bne.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003464:	2301      	movs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 020f 	bic.w	r2, r3, #15
 8003470:	4909      	ldr	r1, [pc, #36]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	40022000 	.word	0x40022000

0800349c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d118      	bne.n	80034e4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034b2:	4b2a      	ldr	r3, [pc, #168]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	e005      	b.n	80034da <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034ce:	4b23      	ldr	r3, [pc, #140]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034da:	4a21      	ldr	r2, [pc, #132]	; (8003560 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d002      	beq.n	80034fa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d003      	beq.n	8003500 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80034f8:	e005      	b.n	8003506 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80034fc:	613b      	str	r3, [r7, #16]
    break;
 80034fe:	e005      	b.n	800350c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003502:	613b      	str	r3, [r7, #16]
    break;
 8003504:	e002      	b.n	800350c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	613b      	str	r3, [r7, #16]
    break;
 800350a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	fb02 f203 	mul.w	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003532:	4b0a      	ldr	r3, [pc, #40]	; (800355c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0e5b      	lsrs	r3, r3, #25
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	3301      	adds	r3, #1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800354c:	683b      	ldr	r3, [r7, #0]
}
 800354e:	4618      	mov	r0, r3
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	080062f4 	.word	0x080062f4
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003574:	2300      	movs	r3, #0
 8003576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003578:	2300      	movs	r3, #0
 800357a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d00b      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d804      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00e      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d015      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800359c:	e01d      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800359e:	2b60      	cmp	r3, #96	; 0x60
 80035a0:	d01e      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d01c      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035a6:	e018      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a8:	4b86      	ldr	r3, [pc, #536]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a85      	ldr	r2, [pc, #532]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b4:	e015      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fafd 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c6:	e00c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3320      	adds	r3, #32
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fbe4 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	74fb      	strb	r3, [r7, #19]
      break;
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80035e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e8:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ee:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	4973      	ldr	r1, [pc, #460]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035fe:	e001      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d042      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	d00f      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800361a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361e:	d805      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003628:	d017      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800362a:	e01f      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800362c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003630:	d01f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d01c      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003638:	e018      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800363a:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003644:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003646:	e015      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fab4 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003658:	e00c      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3320      	adds	r3, #32
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fb9b 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800366a:	e003      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	74fb      	strb	r3, [r7, #19]
      break;
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800367a:	4b52      	ldr	r3, [pc, #328]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	494e      	ldr	r1, [pc, #312]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003690:	e001      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 809f 	beq.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a4:	2300      	movs	r3, #0
 80036a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6593      	str	r3, [r2, #88]	; 0x58
 80036ca:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d6:	2301      	movs	r3, #1
 80036d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3a      	ldr	r2, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036e6:	f7fd fb41 	bl	8000d6c <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ec:	e009      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ee:	f7fd fb3d 	bl	8000d6c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d902      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003700:	e005      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ef      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d15b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01f      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d019      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800374e:	4b1d      	ldr	r3, [pc, #116]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800375e:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d016      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7fd fafc 	bl	8000d6c <HAL_GetTick>
 8003774:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	e00b      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fd faf8 	bl	8000d6c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	f241 3288 	movw	r2, #5000	; 0x1388
 8003786:	4293      	cmp	r3, r2
 8003788:	d902      	bls.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	74fb      	strb	r3, [r7, #19]
            break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ec      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800379e:	7cfb      	ldrb	r3, [r7, #19]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4ba0      	ldr	r3, [pc, #640]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a9f      	ldr	r2, [pc, #636]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ee:	4b9a      	ldr	r3, [pc, #616]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 0203 	bic.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	4996      	ldr	r1, [pc, #600]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003810:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 020c 	bic.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	498e      	ldr	r1, [pc, #568]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	4985      	ldr	r1, [pc, #532]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003854:	4b80      	ldr	r3, [pc, #512]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	497d      	ldr	r1, [pc, #500]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003876:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	4974      	ldr	r1, [pc, #464]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	496c      	ldr	r1, [pc, #432]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	4963      	ldr	r1, [pc, #396]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	495b      	ldr	r1, [pc, #364]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	4952      	ldr	r1, [pc, #328]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003920:	4b4d      	ldr	r3, [pc, #308]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	494a      	ldr	r1, [pc, #296]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	4941      	ldr	r1, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003964:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	4939      	ldr	r1, [pc, #228]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	4930      	ldr	r1, [pc, #192]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b0:	60d3      	str	r3, [r2, #12]
 80039b2:	e011      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f8f9 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d04d      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d108      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039fe:	e012      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a1e:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e020      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d109      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a02      	ldr	r2, [pc, #8]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a52:	60d3      	str	r3, [r2, #12]
 8003a54:	e014      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f8a5 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d028      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a8c:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9a:	4947      	ldr	r1, [pc, #284]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aaa:	d106      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab6:	60d3      	str	r3, [r2, #12]
 8003ab8:	e011      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac2:	d10c      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f876 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01e      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003afa:	492f      	ldr	r1, [pc, #188]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f851 	bl	8003bbc <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b34:	4b20      	ldr	r3, [pc, #128]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3a:	f023 0204 	bic.w	r2, r3, #4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b44:	491c      	ldr	r1, [pc, #112]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b5e:	f023 0218 	bic.w	r2, r3, #24
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	4913      	ldr	r1, [pc, #76]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b9e:	d105      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000

08003bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00e      	beq.n	8003bf4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bd6:	4b6d      	ldr	r3, [pc, #436]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0203 	and.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d103      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13f      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	e03c      	b.n	8003c6e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d00c      	beq.n	8003c16 <RCCEx_PLLSAI1_Config+0x5a>
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d013      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x6c>
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d120      	bne.n	8003c46 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11d      	bne.n	8003c4c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c14:	e01a      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e013      	b.n	8003c50 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10f      	bne.n	8003c54 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c34:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c44:	e006      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4a:	e004      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c54:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f023 0203 	bic.w	r2, r3, #3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4948      	ldr	r1, [pc, #288]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8086 	bne.w	8003d82 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c76:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a44      	ldr	r2, [pc, #272]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c82:	f7fd f873 	bl	8000d6c <HAL_GetTick>
 8003c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c88:	e009      	b.n	8003c9e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c8a:	f7fd f86f 	bl	8000d6c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d902      	bls.n	8003c9e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c9c:	e005      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ef      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d168      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d113      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb6:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6892      	ldr	r2, [r2, #8]
 8003cc2:	0211      	lsls	r1, r2, #8
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68d2      	ldr	r2, [r2, #12]
 8003cc8:	06d2      	lsls	r2, r2, #27
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6852      	ldr	r2, [r2, #4]
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	492d      	ldr	r1, [pc, #180]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]
 8003cdc:	e02d      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d115      	bne.n	8003d10 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6912      	ldr	r2, [r2, #16]
 8003cf6:	0852      	lsrs	r2, r2, #1
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0552      	lsls	r2, r2, #21
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	3a01      	subs	r2, #1
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	430a      	orrs	r2, r1
 8003d08:	4920      	ldr	r1, [pc, #128]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]
 8003d0e:	e014      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	0211      	lsls	r1, r2, #8
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6952      	ldr	r2, [r2, #20]
 8003d22:	0852      	lsrs	r2, r2, #1
 8003d24:	3a01      	subs	r2, #1
 8003d26:	0652      	lsls	r2, r2, #25
 8003d28:	4311      	orrs	r1, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6852      	ldr	r2, [r2, #4]
 8003d2e:	3a01      	subs	r2, #1
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	430a      	orrs	r2, r1
 8003d34:	4915      	ldr	r1, [pc, #84]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fd f811 	bl	8000d6c <HAL_GetTick>
 8003d4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d4c:	e009      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d4e:	f7fd f80d 	bl	8000d6c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d902      	bls.n	8003d62 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d60:	e005      	b.n	8003d6e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ef      	beq.n	8003d4e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	4903      	ldr	r1, [pc, #12]	; (8003d8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	07ff800f 	.word	0x07ff800f
 8003d94:	ff9f800f 	.word	0xff9f800f
 8003d98:	f9ff800f 	.word	0xf9ff800f

08003d9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003daa:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003db6:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0203 	and.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d103      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13f      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e03c      	b.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d00c      	beq.n	8003df6 <RCCEx_PLLSAI2_Config+0x5a>
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d013      	beq.n	8003e08 <RCCEx_PLLSAI2_Config+0x6c>
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d120      	bne.n	8003e26 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df4:	e01a      	b.n	8003e2c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df6:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d116      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e06:	e013      	b.n	8003e30 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e08:	4b58      	ldr	r3, [pc, #352]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e14:	4b55      	ldr	r3, [pc, #340]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e24:	e006      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2a:	e004      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e002      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e30:	bf00      	nop
 8003e32:	e000      	b.n	8003e36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003e34:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d108      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4948      	ldr	r1, [pc, #288]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 8086 	bne.w	8003f62 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e56:	4b45      	ldr	r3, [pc, #276]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a44      	ldr	r2, [pc, #272]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fc ff83 	bl	8000d6c <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e68:	e009      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e6a:	f7fc ff7f 	bl	8000d6c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d902      	bls.n	8003e7e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7c:	e005      	b.n	8003e8a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ef      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d168      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d113      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e96:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6892      	ldr	r2, [r2, #8]
 8003ea2:	0211      	lsls	r1, r2, #8
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	06d2      	lsls	r2, r2, #27
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0112      	lsls	r2, r2, #4
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	492d      	ldr	r1, [pc, #180]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	614b      	str	r3, [r1, #20]
 8003ebc:	e02d      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d115      	bne.n	8003ef0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ec4:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6892      	ldr	r2, [r2, #8]
 8003ed0:	0211      	lsls	r1, r2, #8
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6912      	ldr	r2, [r2, #16]
 8003ed6:	0852      	lsrs	r2, r2, #1
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	0552      	lsls	r2, r2, #21
 8003edc:	4311      	orrs	r1, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6852      	ldr	r2, [r2, #4]
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	4920      	ldr	r1, [pc, #128]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	614b      	str	r3, [r1, #20]
 8003eee:	e014      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6952      	ldr	r2, [r2, #20]
 8003f02:	0852      	lsrs	r2, r2, #1
 8003f04:	3a01      	subs	r2, #1
 8003f06:	0652      	lsls	r2, r2, #25
 8003f08:	4311      	orrs	r1, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6852      	ldr	r2, [r2, #4]
 8003f0e:	3a01      	subs	r2, #1
 8003f10:	0112      	lsls	r2, r2, #4
 8003f12:	430a      	orrs	r2, r1
 8003f14:	4915      	ldr	r1, [pc, #84]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fc ff21 	bl	8000d6c <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f2c:	e009      	b.n	8003f42 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f2e:	f7fc ff1d 	bl	8000d6c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d902      	bls.n	8003f42 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f40:	e005      	b.n	8003f4e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ef      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4903      	ldr	r1, [pc, #12]	; (8003f6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	07ff800f 	.word	0x07ff800f
 8003f74:	ff9f800f 	.word	0xff9f800f
 8003f78:	f9ff800f 	.word	0xf9ff800f

08003f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e042      	b.n	8004014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fc fd7f 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2224      	movs	r2, #36	; 0x24
 8003faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8c6 	bl	8004150 <UART_SetConfig>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e022      	b.n	8004014 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f001 faa8 	bl	800552c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f001 fb2f 	bl	8005670 <UART_CheckIdleState>
 8004012:	4603      	mov	r3, r0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	2b20      	cmp	r3, #32
 8004034:	f040 8084 	bne.w	8004140 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_UART_Transmit+0x28>
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e07c      	b.n	8004142 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_UART_Transmit+0x3a>
 8004052:	2302      	movs	r3, #2
 8004054:	e075      	b.n	8004142 <HAL_UART_Transmit+0x126>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2221      	movs	r2, #33	; 0x21
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800406e:	f7fc fe7d 	bl	8000d6c <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d108      	bne.n	80040a0 <HAL_UART_Transmit+0x84>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e003      	b.n	80040a8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80040b0:	e02d      	b.n	800410e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	; 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f001 fb1f 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e03a      	b.n	8004142 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040de:	b292      	uxth	r2, r2
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3302      	adds	r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e008      	b.n	80040fc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	b292      	uxth	r2, r2
 80040f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1cb      	bne.n	80040b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2140      	movs	r1, #64	; 0x40
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f001 faeb 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e006      	b.n	8004142 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e000      	b.n	8004142 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004140:	2302      	movs	r3, #2
  }
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	0000      	movs	r0, r0
 800414c:	0000      	movs	r0, r0
	...

08004150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004154:	b08a      	sub	sp, #40	; 0x28
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4313      	orrs	r3, r2
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	4313      	orrs	r3, r2
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4baa      	ldr	r3, [pc, #680]	; (8004438 <UART_SetConfig+0x2e8>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004198:	430b      	orrs	r3, r1
 800419a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a9f      	ldr	r2, [pc, #636]	; (800443c <UART_SetConfig+0x2ec>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	4313      	orrs	r3, r2
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f023 010f 	bic.w	r1, r3, #15
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a90      	ldr	r2, [pc, #576]	; (8004440 <UART_SetConfig+0x2f0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d126      	bne.n	8004252 <UART_SetConfig+0x102>
 8004204:	4b8f      	ldr	r3, [pc, #572]	; (8004444 <UART_SetConfig+0x2f4>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b03      	cmp	r3, #3
 8004210:	d81a      	bhi.n	8004248 <UART_SetConfig+0xf8>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <UART_SetConfig+0xc8>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004229 	.word	0x08004229
 800421c:	08004239 	.word	0x08004239
 8004220:	08004231 	.word	0x08004231
 8004224:	08004241 	.word	0x08004241
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e116      	b.n	800445e <UART_SetConfig+0x30e>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004236:	e112      	b.n	800445e <UART_SetConfig+0x30e>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e10e      	b.n	800445e <UART_SetConfig+0x30e>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e10a      	b.n	800445e <UART_SetConfig+0x30e>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	bf00      	nop
 8004250:	e105      	b.n	800445e <UART_SetConfig+0x30e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7c      	ldr	r2, [pc, #496]	; (8004448 <UART_SetConfig+0x2f8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d138      	bne.n	80042ce <UART_SetConfig+0x17e>
 800425c:	4b79      	ldr	r3, [pc, #484]	; (8004444 <UART_SetConfig+0x2f4>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d82c      	bhi.n	80042c4 <UART_SetConfig+0x174>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x120>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042c5 	.word	0x080042c5
 8004278:	080042c5 	.word	0x080042c5
 800427c:	080042c5 	.word	0x080042c5
 8004280:	080042b5 	.word	0x080042b5
 8004284:	080042c5 	.word	0x080042c5
 8004288:	080042c5 	.word	0x080042c5
 800428c:	080042c5 	.word	0x080042c5
 8004290:	080042ad 	.word	0x080042ad
 8004294:	080042c5 	.word	0x080042c5
 8004298:	080042c5 	.word	0x080042c5
 800429c:	080042c5 	.word	0x080042c5
 80042a0:	080042bd 	.word	0x080042bd
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e0d8      	b.n	800445e <UART_SetConfig+0x30e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e0d4      	b.n	800445e <UART_SetConfig+0x30e>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e0d0      	b.n	800445e <UART_SetConfig+0x30e>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e0cc      	b.n	800445e <UART_SetConfig+0x30e>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	bf00      	nop
 80042cc:	e0c7      	b.n	800445e <UART_SetConfig+0x30e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5e      	ldr	r2, [pc, #376]	; (800444c <UART_SetConfig+0x2fc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d125      	bne.n	8004324 <UART_SetConfig+0x1d4>
 80042d8:	4b5a      	ldr	r3, [pc, #360]	; (8004444 <UART_SetConfig+0x2f4>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d011      	beq.n	800430a <UART_SetConfig+0x1ba>
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d802      	bhi.n	80042f0 <UART_SetConfig+0x1a0>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <UART_SetConfig+0x1aa>
 80042ee:	e014      	b.n	800431a <UART_SetConfig+0x1ca>
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d006      	beq.n	8004302 <UART_SetConfig+0x1b2>
 80042f4:	2b30      	cmp	r3, #48	; 0x30
 80042f6:	d00c      	beq.n	8004312 <UART_SetConfig+0x1c2>
 80042f8:	e00f      	b.n	800431a <UART_SetConfig+0x1ca>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004300:	e0ad      	b.n	800445e <UART_SetConfig+0x30e>
 8004302:	2302      	movs	r3, #2
 8004304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004308:	e0a9      	b.n	800445e <UART_SetConfig+0x30e>
 800430a:	2304      	movs	r3, #4
 800430c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004310:	e0a5      	b.n	800445e <UART_SetConfig+0x30e>
 8004312:	2308      	movs	r3, #8
 8004314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004318:	e0a1      	b.n	800445e <UART_SetConfig+0x30e>
 800431a:	2310      	movs	r3, #16
 800431c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004320:	bf00      	nop
 8004322:	e09c      	b.n	800445e <UART_SetConfig+0x30e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a49      	ldr	r2, [pc, #292]	; (8004450 <UART_SetConfig+0x300>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d125      	bne.n	800437a <UART_SetConfig+0x22a>
 800432e:	4b45      	ldr	r3, [pc, #276]	; (8004444 <UART_SetConfig+0x2f4>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d011      	beq.n	8004360 <UART_SetConfig+0x210>
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	d802      	bhi.n	8004346 <UART_SetConfig+0x1f6>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <UART_SetConfig+0x200>
 8004344:	e014      	b.n	8004370 <UART_SetConfig+0x220>
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d006      	beq.n	8004358 <UART_SetConfig+0x208>
 800434a:	2bc0      	cmp	r3, #192	; 0xc0
 800434c:	d00c      	beq.n	8004368 <UART_SetConfig+0x218>
 800434e:	e00f      	b.n	8004370 <UART_SetConfig+0x220>
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e082      	b.n	800445e <UART_SetConfig+0x30e>
 8004358:	2302      	movs	r3, #2
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e07e      	b.n	800445e <UART_SetConfig+0x30e>
 8004360:	2304      	movs	r3, #4
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e07a      	b.n	800445e <UART_SetConfig+0x30e>
 8004368:	2308      	movs	r3, #8
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436e:	e076      	b.n	800445e <UART_SetConfig+0x30e>
 8004370:	2310      	movs	r3, #16
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004376:	bf00      	nop
 8004378:	e071      	b.n	800445e <UART_SetConfig+0x30e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a35      	ldr	r2, [pc, #212]	; (8004454 <UART_SetConfig+0x304>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d129      	bne.n	80043d8 <UART_SetConfig+0x288>
 8004384:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <UART_SetConfig+0x2f4>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d014      	beq.n	80043be <UART_SetConfig+0x26e>
 8004394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004398:	d802      	bhi.n	80043a0 <UART_SetConfig+0x250>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <UART_SetConfig+0x25e>
 800439e:	e016      	b.n	80043ce <UART_SetConfig+0x27e>
 80043a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a4:	d007      	beq.n	80043b6 <UART_SetConfig+0x266>
 80043a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043aa:	d00c      	beq.n	80043c6 <UART_SetConfig+0x276>
 80043ac:	e00f      	b.n	80043ce <UART_SetConfig+0x27e>
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b4:	e053      	b.n	800445e <UART_SetConfig+0x30e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043bc:	e04f      	b.n	800445e <UART_SetConfig+0x30e>
 80043be:	2304      	movs	r3, #4
 80043c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c4:	e04b      	b.n	800445e <UART_SetConfig+0x30e>
 80043c6:	2308      	movs	r3, #8
 80043c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043cc:	e047      	b.n	800445e <UART_SetConfig+0x30e>
 80043ce:	2310      	movs	r3, #16
 80043d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d4:	bf00      	nop
 80043d6:	e042      	b.n	800445e <UART_SetConfig+0x30e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <UART_SetConfig+0x2ec>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d13a      	bne.n	8004458 <UART_SetConfig+0x308>
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <UART_SetConfig+0x2f4>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f0:	d014      	beq.n	800441c <UART_SetConfig+0x2cc>
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d802      	bhi.n	80043fe <UART_SetConfig+0x2ae>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <UART_SetConfig+0x2bc>
 80043fc:	e016      	b.n	800442c <UART_SetConfig+0x2dc>
 80043fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004402:	d007      	beq.n	8004414 <UART_SetConfig+0x2c4>
 8004404:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004408:	d00c      	beq.n	8004424 <UART_SetConfig+0x2d4>
 800440a:	e00f      	b.n	800442c <UART_SetConfig+0x2dc>
 800440c:	2300      	movs	r3, #0
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e024      	b.n	800445e <UART_SetConfig+0x30e>
 8004414:	2302      	movs	r3, #2
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e020      	b.n	800445e <UART_SetConfig+0x30e>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e01c      	b.n	800445e <UART_SetConfig+0x30e>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e018      	b.n	800445e <UART_SetConfig+0x30e>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004432:	bf00      	nop
 8004434:	e013      	b.n	800445e <UART_SetConfig+0x30e>
 8004436:	bf00      	nop
 8004438:	cfff69f3 	.word	0xcfff69f3
 800443c:	40008000 	.word	0x40008000
 8004440:	40013800 	.word	0x40013800
 8004444:	40021000 	.word	0x40021000
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a86      	ldr	r2, [pc, #536]	; (800467c <UART_SetConfig+0x52c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	f040 8422 	bne.w	8004cae <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800446a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800446e:	2b08      	cmp	r3, #8
 8004470:	f200 8173 	bhi.w	800475a <UART_SetConfig+0x60a>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x32c>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a1 	.word	0x080044a1
 8004480:	0800475b 	.word	0x0800475b
 8004484:	08004543 	.word	0x08004543
 8004488:	0800475b 	.word	0x0800475b
 800448c:	080045db 	.word	0x080045db
 8004490:	0800475b 	.word	0x0800475b
 8004494:	0800475b 	.word	0x0800475b
 8004498:	0800475b 	.word	0x0800475b
 800449c:	080046ad 	.word	0x080046ad
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80044a0:	f7fe ff76 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d044      	beq.n	8004538 <UART_SetConfig+0x3e8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d03e      	beq.n	8004534 <UART_SetConfig+0x3e4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d038      	beq.n	8004530 <UART_SetConfig+0x3e0>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d032      	beq.n	800452c <UART_SetConfig+0x3dc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d02c      	beq.n	8004528 <UART_SetConfig+0x3d8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d026      	beq.n	8004524 <UART_SetConfig+0x3d4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b06      	cmp	r3, #6
 80044dc:	d020      	beq.n	8004520 <UART_SetConfig+0x3d0>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b07      	cmp	r3, #7
 80044e4:	d01a      	beq.n	800451c <UART_SetConfig+0x3cc>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d014      	beq.n	8004518 <UART_SetConfig+0x3c8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d00e      	beq.n	8004514 <UART_SetConfig+0x3c4>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	2b0a      	cmp	r3, #10
 80044fc:	d008      	beq.n	8004510 <UART_SetConfig+0x3c0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b0b      	cmp	r3, #11
 8004504:	d102      	bne.n	800450c <UART_SetConfig+0x3bc>
 8004506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800450a:	e016      	b.n	800453a <UART_SetConfig+0x3ea>
 800450c:	2301      	movs	r3, #1
 800450e:	e014      	b.n	800453a <UART_SetConfig+0x3ea>
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	e012      	b.n	800453a <UART_SetConfig+0x3ea>
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	e010      	b.n	800453a <UART_SetConfig+0x3ea>
 8004518:	2320      	movs	r3, #32
 800451a:	e00e      	b.n	800453a <UART_SetConfig+0x3ea>
 800451c:	2310      	movs	r3, #16
 800451e:	e00c      	b.n	800453a <UART_SetConfig+0x3ea>
 8004520:	230c      	movs	r3, #12
 8004522:	e00a      	b.n	800453a <UART_SetConfig+0x3ea>
 8004524:	230a      	movs	r3, #10
 8004526:	e008      	b.n	800453a <UART_SetConfig+0x3ea>
 8004528:	2308      	movs	r3, #8
 800452a:	e006      	b.n	800453a <UART_SetConfig+0x3ea>
 800452c:	2306      	movs	r3, #6
 800452e:	e004      	b.n	800453a <UART_SetConfig+0x3ea>
 8004530:	2304      	movs	r3, #4
 8004532:	e002      	b.n	800453a <UART_SetConfig+0x3ea>
 8004534:	2302      	movs	r3, #2
 8004536:	e000      	b.n	800453a <UART_SetConfig+0x3ea>
 8004538:	2301      	movs	r3, #1
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004540:	e10e      	b.n	8004760 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d044      	beq.n	80045d4 <UART_SetConfig+0x484>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b01      	cmp	r3, #1
 8004550:	d03e      	beq.n	80045d0 <UART_SetConfig+0x480>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b02      	cmp	r3, #2
 8004558:	d038      	beq.n	80045cc <UART_SetConfig+0x47c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b03      	cmp	r3, #3
 8004560:	d032      	beq.n	80045c8 <UART_SetConfig+0x478>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b04      	cmp	r3, #4
 8004568:	d02c      	beq.n	80045c4 <UART_SetConfig+0x474>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b05      	cmp	r3, #5
 8004570:	d026      	beq.n	80045c0 <UART_SetConfig+0x470>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b06      	cmp	r3, #6
 8004578:	d020      	beq.n	80045bc <UART_SetConfig+0x46c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b07      	cmp	r3, #7
 8004580:	d01a      	beq.n	80045b8 <UART_SetConfig+0x468>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b08      	cmp	r3, #8
 8004588:	d014      	beq.n	80045b4 <UART_SetConfig+0x464>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b09      	cmp	r3, #9
 8004590:	d00e      	beq.n	80045b0 <UART_SetConfig+0x460>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b0a      	cmp	r3, #10
 8004598:	d008      	beq.n	80045ac <UART_SetConfig+0x45c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b0b      	cmp	r3, #11
 80045a0:	d102      	bne.n	80045a8 <UART_SetConfig+0x458>
 80045a2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045a6:	e016      	b.n	80045d6 <UART_SetConfig+0x486>
 80045a8:	4b35      	ldr	r3, [pc, #212]	; (8004680 <UART_SetConfig+0x530>)
 80045aa:	e014      	b.n	80045d6 <UART_SetConfig+0x486>
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <UART_SetConfig+0x534>)
 80045ae:	e012      	b.n	80045d6 <UART_SetConfig+0x486>
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <UART_SetConfig+0x538>)
 80045b2:	e010      	b.n	80045d6 <UART_SetConfig+0x486>
 80045b4:	4b35      	ldr	r3, [pc, #212]	; (800468c <UART_SetConfig+0x53c>)
 80045b6:	e00e      	b.n	80045d6 <UART_SetConfig+0x486>
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <UART_SetConfig+0x540>)
 80045ba:	e00c      	b.n	80045d6 <UART_SetConfig+0x486>
 80045bc:	4b35      	ldr	r3, [pc, #212]	; (8004694 <UART_SetConfig+0x544>)
 80045be:	e00a      	b.n	80045d6 <UART_SetConfig+0x486>
 80045c0:	4b35      	ldr	r3, [pc, #212]	; (8004698 <UART_SetConfig+0x548>)
 80045c2:	e008      	b.n	80045d6 <UART_SetConfig+0x486>
 80045c4:	4b35      	ldr	r3, [pc, #212]	; (800469c <UART_SetConfig+0x54c>)
 80045c6:	e006      	b.n	80045d6 <UART_SetConfig+0x486>
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <UART_SetConfig+0x550>)
 80045ca:	e004      	b.n	80045d6 <UART_SetConfig+0x486>
 80045cc:	4b35      	ldr	r3, [pc, #212]	; (80046a4 <UART_SetConfig+0x554>)
 80045ce:	e002      	b.n	80045d6 <UART_SetConfig+0x486>
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <UART_SetConfig+0x558>)
 80045d2:	e000      	b.n	80045d6 <UART_SetConfig+0x486>
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <UART_SetConfig+0x530>)
 80045d6:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80045d8:	e0c2      	b.n	8004760 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80045da:	f7fe fe43 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d044      	beq.n	8004672 <UART_SetConfig+0x522>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d03e      	beq.n	800466e <UART_SetConfig+0x51e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d038      	beq.n	800466a <UART_SetConfig+0x51a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d032      	beq.n	8004666 <UART_SetConfig+0x516>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b04      	cmp	r3, #4
 8004606:	d02c      	beq.n	8004662 <UART_SetConfig+0x512>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b05      	cmp	r3, #5
 800460e:	d026      	beq.n	800465e <UART_SetConfig+0x50e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b06      	cmp	r3, #6
 8004616:	d020      	beq.n	800465a <UART_SetConfig+0x50a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	2b07      	cmp	r3, #7
 800461e:	d01a      	beq.n	8004656 <UART_SetConfig+0x506>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b08      	cmp	r3, #8
 8004626:	d014      	beq.n	8004652 <UART_SetConfig+0x502>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	2b09      	cmp	r3, #9
 800462e:	d00e      	beq.n	800464e <UART_SetConfig+0x4fe>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	2b0a      	cmp	r3, #10
 8004636:	d008      	beq.n	800464a <UART_SetConfig+0x4fa>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2b0b      	cmp	r3, #11
 800463e:	d102      	bne.n	8004646 <UART_SetConfig+0x4f6>
 8004640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004644:	e016      	b.n	8004674 <UART_SetConfig+0x524>
 8004646:	2301      	movs	r3, #1
 8004648:	e014      	b.n	8004674 <UART_SetConfig+0x524>
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	e012      	b.n	8004674 <UART_SetConfig+0x524>
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	e010      	b.n	8004674 <UART_SetConfig+0x524>
 8004652:	2320      	movs	r3, #32
 8004654:	e00e      	b.n	8004674 <UART_SetConfig+0x524>
 8004656:	2310      	movs	r3, #16
 8004658:	e00c      	b.n	8004674 <UART_SetConfig+0x524>
 800465a:	230c      	movs	r3, #12
 800465c:	e00a      	b.n	8004674 <UART_SetConfig+0x524>
 800465e:	230a      	movs	r3, #10
 8004660:	e008      	b.n	8004674 <UART_SetConfig+0x524>
 8004662:	2308      	movs	r3, #8
 8004664:	e006      	b.n	8004674 <UART_SetConfig+0x524>
 8004666:	2306      	movs	r3, #6
 8004668:	e004      	b.n	8004674 <UART_SetConfig+0x524>
 800466a:	2304      	movs	r3, #4
 800466c:	e002      	b.n	8004674 <UART_SetConfig+0x524>
 800466e:	2302      	movs	r3, #2
 8004670:	e000      	b.n	8004674 <UART_SetConfig+0x524>
 8004672:	2301      	movs	r3, #1
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800467a:	e071      	b.n	8004760 <UART_SetConfig+0x610>
 800467c:	40008000 	.word	0x40008000
 8004680:	00f42400 	.word	0x00f42400
 8004684:	0001e848 	.word	0x0001e848
 8004688:	0003d090 	.word	0x0003d090
 800468c:	0007a120 	.word	0x0007a120
 8004690:	000f4240 	.word	0x000f4240
 8004694:	00145855 	.word	0x00145855
 8004698:	00186a00 	.word	0x00186a00
 800469c:	001e8480 	.word	0x001e8480
 80046a0:	0028b0aa 	.word	0x0028b0aa
 80046a4:	003d0900 	.word	0x003d0900
 80046a8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d04e      	beq.n	8004752 <UART_SetConfig+0x602>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d047      	beq.n	800474c <UART_SetConfig+0x5fc>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d040      	beq.n	8004746 <UART_SetConfig+0x5f6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d039      	beq.n	8004740 <UART_SetConfig+0x5f0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d032      	beq.n	800473a <UART_SetConfig+0x5ea>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d02b      	beq.n	8004734 <UART_SetConfig+0x5e4>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d024      	beq.n	800472e <UART_SetConfig+0x5de>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b07      	cmp	r3, #7
 80046ea:	d01d      	beq.n	8004728 <UART_SetConfig+0x5d8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d016      	beq.n	8004722 <UART_SetConfig+0x5d2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b09      	cmp	r3, #9
 80046fa:	d00f      	beq.n	800471c <UART_SetConfig+0x5cc>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b0a      	cmp	r3, #10
 8004702:	d008      	beq.n	8004716 <UART_SetConfig+0x5c6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2b0b      	cmp	r3, #11
 800470a:	d101      	bne.n	8004710 <UART_SetConfig+0x5c0>
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	e022      	b.n	8004756 <UART_SetConfig+0x606>
 8004710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004714:	e01f      	b.n	8004756 <UART_SetConfig+0x606>
 8004716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800471a:	e01c      	b.n	8004756 <UART_SetConfig+0x606>
 800471c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004720:	e019      	b.n	8004756 <UART_SetConfig+0x606>
 8004722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004726:	e016      	b.n	8004756 <UART_SetConfig+0x606>
 8004728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800472c:	e013      	b.n	8004756 <UART_SetConfig+0x606>
 800472e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004732:	e010      	b.n	8004756 <UART_SetConfig+0x606>
 8004734:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004738:	e00d      	b.n	8004756 <UART_SetConfig+0x606>
 800473a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800473e:	e00a      	b.n	8004756 <UART_SetConfig+0x606>
 8004740:	f241 5355 	movw	r3, #5461	; 0x1555
 8004744:	e007      	b.n	8004756 <UART_SetConfig+0x606>
 8004746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800474a:	e004      	b.n	8004756 <UART_SetConfig+0x606>
 800474c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004750:	e001      	b.n	8004756 <UART_SetConfig+0x606>
 8004752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004756:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004758:	e002      	b.n	8004760 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	76fb      	strb	r3, [r7, #27]
        break;
 800475e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 86b7 	beq.w	80054d6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	d305      	bcc.n	8004784 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d903      	bls.n	800478c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	f000 bea5 	b.w	80054d6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800478c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004790:	2b08      	cmp	r3, #8
 8004792:	f200 8277 	bhi.w	8004c84 <UART_SetConfig+0xb34>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <UART_SetConfig+0x64c>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	08004c85 	.word	0x08004c85
 80047a4:	080048ff 	.word	0x080048ff
 80047a8:	08004c85 	.word	0x08004c85
 80047ac:	080049f5 	.word	0x080049f5
 80047b0:	08004c85 	.word	0x08004c85
 80047b4:	08004c85 	.word	0x08004c85
 80047b8:	08004c85 	.word	0x08004c85
 80047bc:	08004b33 	.word	0x08004b33
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe fde6 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 80047c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d067      	beq.n	80048a6 <UART_SetConfig+0x756>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d05e      	beq.n	800489c <UART_SetConfig+0x74c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d055      	beq.n	8004892 <UART_SetConfig+0x742>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d04c      	beq.n	8004888 <UART_SetConfig+0x738>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d043      	beq.n	800487e <UART_SetConfig+0x72e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d03a      	beq.n	8004874 <UART_SetConfig+0x724>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b06      	cmp	r3, #6
 8004804:	d031      	beq.n	800486a <UART_SetConfig+0x71a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b07      	cmp	r3, #7
 800480c:	d028      	beq.n	8004860 <UART_SetConfig+0x710>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b08      	cmp	r3, #8
 8004814:	d01f      	beq.n	8004856 <UART_SetConfig+0x706>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2b09      	cmp	r3, #9
 800481c:	d016      	beq.n	800484c <UART_SetConfig+0x6fc>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b0a      	cmp	r3, #10
 8004824:	d00d      	beq.n	8004842 <UART_SetConfig+0x6f2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b0b      	cmp	r3, #11
 800482c:	d104      	bne.n	8004838 <UART_SetConfig+0x6e8>
 800482e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004832:	f04f 0400 	mov.w	r4, #0
 8004836:	e03a      	b.n	80048ae <UART_SetConfig+0x75e>
 8004838:	f04f 0301 	mov.w	r3, #1
 800483c:	f04f 0400 	mov.w	r4, #0
 8004840:	e035      	b.n	80048ae <UART_SetConfig+0x75e>
 8004842:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	e030      	b.n	80048ae <UART_SetConfig+0x75e>
 800484c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	e02b      	b.n	80048ae <UART_SetConfig+0x75e>
 8004856:	f04f 0320 	mov.w	r3, #32
 800485a:	f04f 0400 	mov.w	r4, #0
 800485e:	e026      	b.n	80048ae <UART_SetConfig+0x75e>
 8004860:	f04f 0310 	mov.w	r3, #16
 8004864:	f04f 0400 	mov.w	r4, #0
 8004868:	e021      	b.n	80048ae <UART_SetConfig+0x75e>
 800486a:	f04f 030c 	mov.w	r3, #12
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	e01c      	b.n	80048ae <UART_SetConfig+0x75e>
 8004874:	f04f 030a 	mov.w	r3, #10
 8004878:	f04f 0400 	mov.w	r4, #0
 800487c:	e017      	b.n	80048ae <UART_SetConfig+0x75e>
 800487e:	f04f 0308 	mov.w	r3, #8
 8004882:	f04f 0400 	mov.w	r4, #0
 8004886:	e012      	b.n	80048ae <UART_SetConfig+0x75e>
 8004888:	f04f 0306 	mov.w	r3, #6
 800488c:	f04f 0400 	mov.w	r4, #0
 8004890:	e00d      	b.n	80048ae <UART_SetConfig+0x75e>
 8004892:	f04f 0304 	mov.w	r3, #4
 8004896:	f04f 0400 	mov.w	r4, #0
 800489a:	e008      	b.n	80048ae <UART_SetConfig+0x75e>
 800489c:	f04f 0302 	mov.w	r3, #2
 80048a0:	f04f 0400 	mov.w	r4, #0
 80048a4:	e003      	b.n	80048ae <UART_SetConfig+0x75e>
 80048a6:	f04f 0301 	mov.w	r3, #1
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	461a      	mov	r2, r3
 80048b0:	4623      	mov	r3, r4
 80048b2:	f7fb fcf5 	bl	80002a0 <__aeabi_uldivmod>
 80048b6:	4603      	mov	r3, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	4619      	mov	r1, r3
 80048bc:	4622      	mov	r2, r4
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	f04f 0400 	mov.w	r4, #0
 80048c6:	0214      	lsls	r4, r2, #8
 80048c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048cc:	020b      	lsls	r3, r1, #8
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6852      	ldr	r2, [r2, #4]
 80048d2:	0852      	lsrs	r2, r2, #1
 80048d4:	4611      	mov	r1, r2
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	eb13 0b01 	adds.w	fp, r3, r1
 80048de:	eb44 0c02 	adc.w	ip, r4, r2
 80048e2:	4658      	mov	r0, fp
 80048e4:	4661      	mov	r1, ip
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f04f 0400 	mov.w	r4, #0
 80048ee:	461a      	mov	r2, r3
 80048f0:	4623      	mov	r3, r4
 80048f2:	f7fb fcd5 	bl	80002a0 <__aeabi_uldivmod>
 80048f6:	4603      	mov	r3, r0
 80048f8:	460c      	mov	r4, r1
 80048fa:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80048fc:	e1c5      	b.n	8004c8a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d05b      	beq.n	80049be <UART_SetConfig+0x86e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b01      	cmp	r3, #1
 800490c:	d053      	beq.n	80049b6 <UART_SetConfig+0x866>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2b02      	cmp	r3, #2
 8004914:	d04b      	beq.n	80049ae <UART_SetConfig+0x85e>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2b03      	cmp	r3, #3
 800491c:	d043      	beq.n	80049a6 <UART_SetConfig+0x856>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b04      	cmp	r3, #4
 8004924:	d03b      	beq.n	800499e <UART_SetConfig+0x84e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	2b05      	cmp	r3, #5
 800492c:	d033      	beq.n	8004996 <UART_SetConfig+0x846>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	2b06      	cmp	r3, #6
 8004934:	d02b      	beq.n	800498e <UART_SetConfig+0x83e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b07      	cmp	r3, #7
 800493c:	d023      	beq.n	8004986 <UART_SetConfig+0x836>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b08      	cmp	r3, #8
 8004944:	d01b      	beq.n	800497e <UART_SetConfig+0x82e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2b09      	cmp	r3, #9
 800494c:	d013      	beq.n	8004976 <UART_SetConfig+0x826>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b0a      	cmp	r3, #10
 8004954:	d00b      	beq.n	800496e <UART_SetConfig+0x81e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b0b      	cmp	r3, #11
 800495c:	d103      	bne.n	8004966 <UART_SetConfig+0x816>
 800495e:	4bae      	ldr	r3, [pc, #696]	; (8004c18 <UART_SetConfig+0xac8>)
 8004960:	f04f 0400 	mov.w	r4, #0
 8004964:	e02e      	b.n	80049c4 <UART_SetConfig+0x874>
 8004966:	4bad      	ldr	r3, [pc, #692]	; (8004c1c <UART_SetConfig+0xacc>)
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	e02a      	b.n	80049c4 <UART_SetConfig+0x874>
 800496e:	4bac      	ldr	r3, [pc, #688]	; (8004c20 <UART_SetConfig+0xad0>)
 8004970:	f04f 0400 	mov.w	r4, #0
 8004974:	e026      	b.n	80049c4 <UART_SetConfig+0x874>
 8004976:	4bab      	ldr	r3, [pc, #684]	; (8004c24 <UART_SetConfig+0xad4>)
 8004978:	f04f 0400 	mov.w	r4, #0
 800497c:	e022      	b.n	80049c4 <UART_SetConfig+0x874>
 800497e:	4baa      	ldr	r3, [pc, #680]	; (8004c28 <UART_SetConfig+0xad8>)
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	e01e      	b.n	80049c4 <UART_SetConfig+0x874>
 8004986:	4ba9      	ldr	r3, [pc, #676]	; (8004c2c <UART_SetConfig+0xadc>)
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	e01a      	b.n	80049c4 <UART_SetConfig+0x874>
 800498e:	a49e      	add	r4, pc, #632	; (adr r4, 8004c08 <UART_SetConfig+0xab8>)
 8004990:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004994:	e016      	b.n	80049c4 <UART_SetConfig+0x874>
 8004996:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <UART_SetConfig+0xae0>)
 8004998:	f04f 0400 	mov.w	r4, #0
 800499c:	e012      	b.n	80049c4 <UART_SetConfig+0x874>
 800499e:	4ba5      	ldr	r3, [pc, #660]	; (8004c34 <UART_SetConfig+0xae4>)
 80049a0:	f04f 0400 	mov.w	r4, #0
 80049a4:	e00e      	b.n	80049c4 <UART_SetConfig+0x874>
 80049a6:	a49a      	add	r4, pc, #616	; (adr r4, 8004c10 <UART_SetConfig+0xac0>)
 80049a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80049ac:	e00a      	b.n	80049c4 <UART_SetConfig+0x874>
 80049ae:	4ba2      	ldr	r3, [pc, #648]	; (8004c38 <UART_SetConfig+0xae8>)
 80049b0:	f04f 0400 	mov.w	r4, #0
 80049b4:	e006      	b.n	80049c4 <UART_SetConfig+0x874>
 80049b6:	4ba1      	ldr	r3, [pc, #644]	; (8004c3c <UART_SetConfig+0xaec>)
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	e002      	b.n	80049c4 <UART_SetConfig+0x874>
 80049be:	4b97      	ldr	r3, [pc, #604]	; (8004c1c <UART_SetConfig+0xacc>)
 80049c0:	f04f 0400 	mov.w	r4, #0
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6852      	ldr	r2, [r2, #4]
 80049c8:	0852      	lsrs	r2, r2, #1
 80049ca:	4611      	mov	r1, r2
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	eb13 0b01 	adds.w	fp, r3, r1
 80049d4:	eb44 0c02 	adc.w	ip, r4, r2
 80049d8:	4658      	mov	r0, fp
 80049da:	4661      	mov	r1, ip
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f04f 0400 	mov.w	r4, #0
 80049e4:	461a      	mov	r2, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	f7fb fc5a 	bl	80002a0 <__aeabi_uldivmod>
 80049ec:	4603      	mov	r3, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80049f2:	e14a      	b.n	8004c8a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80049f4:	f7fe fc36 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 80049f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d067      	beq.n	8004ada <UART_SetConfig+0x98a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d05e      	beq.n	8004ad0 <UART_SetConfig+0x980>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d055      	beq.n	8004ac6 <UART_SetConfig+0x976>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d04c      	beq.n	8004abc <UART_SetConfig+0x96c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d043      	beq.n	8004ab2 <UART_SetConfig+0x962>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d03a      	beq.n	8004aa8 <UART_SetConfig+0x958>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d031      	beq.n	8004a9e <UART_SetConfig+0x94e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2b07      	cmp	r3, #7
 8004a40:	d028      	beq.n	8004a94 <UART_SetConfig+0x944>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d01f      	beq.n	8004a8a <UART_SetConfig+0x93a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	d016      	beq.n	8004a80 <UART_SetConfig+0x930>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b0a      	cmp	r3, #10
 8004a58:	d00d      	beq.n	8004a76 <UART_SetConfig+0x926>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b0b      	cmp	r3, #11
 8004a60:	d104      	bne.n	8004a6c <UART_SetConfig+0x91c>
 8004a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a66:	f04f 0400 	mov.w	r4, #0
 8004a6a:	e03a      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004a6c:	f04f 0301 	mov.w	r3, #1
 8004a70:	f04f 0400 	mov.w	r4, #0
 8004a74:	e035      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004a76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004a7a:	f04f 0400 	mov.w	r4, #0
 8004a7e:	e030      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004a80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004a84:	f04f 0400 	mov.w	r4, #0
 8004a88:	e02b      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004a8a:	f04f 0320 	mov.w	r3, #32
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	e026      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004a94:	f04f 0310 	mov.w	r3, #16
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	e021      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004a9e:	f04f 030c 	mov.w	r3, #12
 8004aa2:	f04f 0400 	mov.w	r4, #0
 8004aa6:	e01c      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004aa8:	f04f 030a 	mov.w	r3, #10
 8004aac:	f04f 0400 	mov.w	r4, #0
 8004ab0:	e017      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004ab2:	f04f 0308 	mov.w	r3, #8
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	e012      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004abc:	f04f 0306 	mov.w	r3, #6
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	e00d      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004ac6:	f04f 0304 	mov.w	r3, #4
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	e008      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004ad0:	f04f 0302 	mov.w	r3, #2
 8004ad4:	f04f 0400 	mov.w	r4, #0
 8004ad8:	e003      	b.n	8004ae2 <UART_SetConfig+0x992>
 8004ada:	f04f 0301 	mov.w	r3, #1
 8004ade:	f04f 0400 	mov.w	r4, #0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	f7fb fbdb 	bl	80002a0 <__aeabi_uldivmod>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	4619      	mov	r1, r3
 8004af0:	4622      	mov	r2, r4
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	f04f 0400 	mov.w	r4, #0
 8004afa:	0214      	lsls	r4, r2, #8
 8004afc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b00:	020b      	lsls	r3, r1, #8
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6852      	ldr	r2, [r2, #4]
 8004b06:	0852      	lsrs	r2, r2, #1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	eb13 0b01 	adds.w	fp, r3, r1
 8004b12:	eb44 0c02 	adc.w	ip, r4, r2
 8004b16:	4658      	mov	r0, fp
 8004b18:	4661      	mov	r1, ip
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f04f 0400 	mov.w	r4, #0
 8004b22:	461a      	mov	r2, r3
 8004b24:	4623      	mov	r3, r4
 8004b26:	f7fb fbbb 	bl	80002a0 <__aeabi_uldivmod>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004b30:	e0ab      	b.n	8004c8a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8088 	beq.w	8004c4c <UART_SetConfig+0xafc>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d05b      	beq.n	8004bfc <UART_SetConfig+0xaac>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d052      	beq.n	8004bf2 <UART_SetConfig+0xaa2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d04a      	beq.n	8004bea <UART_SetConfig+0xa9a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d041      	beq.n	8004be0 <UART_SetConfig+0xa90>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d039      	beq.n	8004bd8 <UART_SetConfig+0xa88>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d031      	beq.n	8004bd0 <UART_SetConfig+0xa80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b07      	cmp	r3, #7
 8004b72:	d028      	beq.n	8004bc6 <UART_SetConfig+0xa76>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d01f      	beq.n	8004bbc <UART_SetConfig+0xa6c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d016      	beq.n	8004bb2 <UART_SetConfig+0xa62>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	2b0a      	cmp	r3, #10
 8004b8a:	d00d      	beq.n	8004ba8 <UART_SetConfig+0xa58>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b0b      	cmp	r3, #11
 8004b92:	d104      	bne.n	8004b9e <UART_SetConfig+0xa4e>
 8004b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e05a      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004b9e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004ba2:	f04f 0400 	mov.w	r4, #0
 8004ba6:	e055      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bac:	f04f 0400 	mov.w	r4, #0
 8004bb0:	e050      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb6:	f04f 0400 	mov.w	r4, #0
 8004bba:	e04b      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	e046      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	e041      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <UART_SetConfig+0xaf0>)
 8004bd2:	f04f 0400 	mov.w	r4, #0
 8004bd6:	e03d      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <UART_SetConfig+0xaf4>)
 8004bda:	f04f 0400 	mov.w	r4, #0
 8004bde:	e039      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004be0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004be4:	f04f 0400 	mov.w	r4, #0
 8004be8:	e034      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <UART_SetConfig+0xaf8>)
 8004bec:	f04f 0400 	mov.w	r4, #0
 8004bf0:	e030      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bf2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	e02b      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004bfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c00:	f04f 0400 	mov.w	r4, #0
 8004c04:	e026      	b.n	8004c54 <UART_SetConfig+0xb04>
 8004c06:	bf00      	nop
 8004c08:	14585500 	.word	0x14585500
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	28b0aa00 	.word	0x28b0aa00
 8004c14:	00000000 	.word	0x00000000
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	f4240000 	.word	0xf4240000
 8004c20:	01e84800 	.word	0x01e84800
 8004c24:	03d09000 	.word	0x03d09000
 8004c28:	07a12000 	.word	0x07a12000
 8004c2c:	0f424000 	.word	0x0f424000
 8004c30:	186a0000 	.word	0x186a0000
 8004c34:	1e848000 	.word	0x1e848000
 8004c38:	3d090000 	.word	0x3d090000
 8004c3c:	7a120000 	.word	0x7a120000
 8004c40:	000aaa00 	.word	0x000aaa00
 8004c44:	000ccc00 	.word	0x000ccc00
 8004c48:	00155500 	.word	0x00155500
 8004c4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6852      	ldr	r2, [r2, #4]
 8004c58:	0852      	lsrs	r2, r2, #1
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	eb13 0b01 	adds.w	fp, r3, r1
 8004c64:	eb44 0c02 	adc.w	ip, r4, r2
 8004c68:	4658      	mov	r0, fp
 8004c6a:	4661      	mov	r1, ip
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f04f 0400 	mov.w	r4, #0
 8004c74:	461a      	mov	r2, r3
 8004c76:	4623      	mov	r3, r4
 8004c78:	f7fb fb12 	bl	80002a0 <__aeabi_uldivmod>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004c82:	e002      	b.n	8004c8a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	76fb      	strb	r3, [r7, #27]
            break;
 8004c88:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c90:	d309      	bcc.n	8004ca6 <UART_SetConfig+0xb56>
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c98:	d205      	bcs.n	8004ca6 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	f000 bc18 	b.w	80054d6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	76fb      	strb	r3, [r7, #27]
 8004caa:	f000 bc14 	b.w	80054d6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb6:	f040 8204 	bne.w	80050c2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8004cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	f200 81df 	bhi.w	8005082 <UART_SetConfig+0xf32>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0xb7c>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004da9 	.word	0x08004da9
 8004cd4:	08004e61 	.word	0x08004e61
 8004cd8:	08005083 	.word	0x08005083
 8004cdc:	08004f09 	.word	0x08004f09
 8004ce0:	08005083 	.word	0x08005083
 8004ce4:	08005083 	.word	0x08005083
 8004ce8:	08005083 	.word	0x08005083
 8004cec:	08004fc1 	.word	0x08004fc1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe fb4e 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d044      	beq.n	8004d88 <UART_SetConfig+0xc38>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d03e      	beq.n	8004d84 <UART_SetConfig+0xc34>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d038      	beq.n	8004d80 <UART_SetConfig+0xc30>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d032      	beq.n	8004d7c <UART_SetConfig+0xc2c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d02c      	beq.n	8004d78 <UART_SetConfig+0xc28>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d026      	beq.n	8004d74 <UART_SetConfig+0xc24>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d020      	beq.n	8004d70 <UART_SetConfig+0xc20>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b07      	cmp	r3, #7
 8004d34:	d01a      	beq.n	8004d6c <UART_SetConfig+0xc1c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d014      	beq.n	8004d68 <UART_SetConfig+0xc18>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b09      	cmp	r3, #9
 8004d44:	d00e      	beq.n	8004d64 <UART_SetConfig+0xc14>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b0a      	cmp	r3, #10
 8004d4c:	d008      	beq.n	8004d60 <UART_SetConfig+0xc10>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2b0b      	cmp	r3, #11
 8004d54:	d102      	bne.n	8004d5c <UART_SetConfig+0xc0c>
 8004d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5a:	e016      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e014      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	e012      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	e010      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d68:	2320      	movs	r3, #32
 8004d6a:	e00e      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	e00c      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d70:	230c      	movs	r3, #12
 8004d72:	e00a      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d74:	230a      	movs	r3, #10
 8004d76:	e008      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	e006      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d7c:	2306      	movs	r3, #6
 8004d7e:	e004      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d80:	2304      	movs	r3, #4
 8004d82:	e002      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e000      	b.n	8004d8a <UART_SetConfig+0xc3a>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	005a      	lsls	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004da6:	e16f      	b.n	8005088 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da8:	f7fe fb08 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004dac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d044      	beq.n	8004e40 <UART_SetConfig+0xcf0>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d03e      	beq.n	8004e3c <UART_SetConfig+0xcec>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d038      	beq.n	8004e38 <UART_SetConfig+0xce8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d032      	beq.n	8004e34 <UART_SetConfig+0xce4>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d02c      	beq.n	8004e30 <UART_SetConfig+0xce0>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	d026      	beq.n	8004e2c <UART_SetConfig+0xcdc>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b06      	cmp	r3, #6
 8004de4:	d020      	beq.n	8004e28 <UART_SetConfig+0xcd8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2b07      	cmp	r3, #7
 8004dec:	d01a      	beq.n	8004e24 <UART_SetConfig+0xcd4>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d014      	beq.n	8004e20 <UART_SetConfig+0xcd0>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	2b09      	cmp	r3, #9
 8004dfc:	d00e      	beq.n	8004e1c <UART_SetConfig+0xccc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b0a      	cmp	r3, #10
 8004e04:	d008      	beq.n	8004e18 <UART_SetConfig+0xcc8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b0b      	cmp	r3, #11
 8004e0c:	d102      	bne.n	8004e14 <UART_SetConfig+0xcc4>
 8004e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e12:	e016      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e014      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	e012      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e1c:	2340      	movs	r3, #64	; 0x40
 8004e1e:	e010      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e20:	2320      	movs	r3, #32
 8004e22:	e00e      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e24:	2310      	movs	r3, #16
 8004e26:	e00c      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e28:	230c      	movs	r3, #12
 8004e2a:	e00a      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e2c:	230a      	movs	r3, #10
 8004e2e:	e008      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e30:	2308      	movs	r3, #8
 8004e32:	e006      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e34:	2306      	movs	r3, #6
 8004e36:	e004      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	e002      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e000      	b.n	8004e42 <UART_SetConfig+0xcf2>
 8004e40:	2301      	movs	r3, #1
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	005a      	lsls	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	441a      	add	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e5e:	e113      	b.n	8005088 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d043      	beq.n	8004ef0 <UART_SetConfig+0xda0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d03d      	beq.n	8004eec <UART_SetConfig+0xd9c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d037      	beq.n	8004ee8 <UART_SetConfig+0xd98>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d031      	beq.n	8004ee4 <UART_SetConfig+0xd94>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d02b      	beq.n	8004ee0 <UART_SetConfig+0xd90>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d025      	beq.n	8004edc <UART_SetConfig+0xd8c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d01f      	beq.n	8004ed8 <UART_SetConfig+0xd88>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b07      	cmp	r3, #7
 8004e9e:	d019      	beq.n	8004ed4 <UART_SetConfig+0xd84>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d013      	beq.n	8004ed0 <UART_SetConfig+0xd80>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	2b09      	cmp	r3, #9
 8004eae:	d00d      	beq.n	8004ecc <UART_SetConfig+0xd7c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	2b0a      	cmp	r3, #10
 8004eb6:	d007      	beq.n	8004ec8 <UART_SetConfig+0xd78>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b0b      	cmp	r3, #11
 8004ebe:	d101      	bne.n	8004ec4 <UART_SetConfig+0xd74>
 8004ec0:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <UART_SetConfig+0xfa8>)
 8004ec2:	e016      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ec4:	4b8d      	ldr	r3, [pc, #564]	; (80050fc <UART_SetConfig+0xfac>)
 8004ec6:	e014      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <UART_SetConfig+0xfb0>)
 8004eca:	e012      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ecc:	4b8d      	ldr	r3, [pc, #564]	; (8005104 <UART_SetConfig+0xfb4>)
 8004ece:	e010      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ed0:	4b8d      	ldr	r3, [pc, #564]	; (8005108 <UART_SetConfig+0xfb8>)
 8004ed2:	e00e      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ed4:	4b8d      	ldr	r3, [pc, #564]	; (800510c <UART_SetConfig+0xfbc>)
 8004ed6:	e00c      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ed8:	4b8d      	ldr	r3, [pc, #564]	; (8005110 <UART_SetConfig+0xfc0>)
 8004eda:	e00a      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004edc:	4b8d      	ldr	r3, [pc, #564]	; (8005114 <UART_SetConfig+0xfc4>)
 8004ede:	e008      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ee0:	4b8d      	ldr	r3, [pc, #564]	; (8005118 <UART_SetConfig+0xfc8>)
 8004ee2:	e006      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ee4:	4b8d      	ldr	r3, [pc, #564]	; (800511c <UART_SetConfig+0xfcc>)
 8004ee6:	e004      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ee8:	4b8d      	ldr	r3, [pc, #564]	; (8005120 <UART_SetConfig+0xfd0>)
 8004eea:	e002      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004eec:	4b8d      	ldr	r3, [pc, #564]	; (8005124 <UART_SetConfig+0xfd4>)
 8004eee:	e000      	b.n	8004ef2 <UART_SetConfig+0xda2>
 8004ef0:	4b82      	ldr	r3, [pc, #520]	; (80050fc <UART_SetConfig+0xfac>)
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6852      	ldr	r2, [r2, #4]
 8004ef6:	0852      	lsrs	r2, r2, #1
 8004ef8:	441a      	add	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f06:	e0bf      	b.n	8005088 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f08:	f7fe f9ac 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8004f0c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d044      	beq.n	8004fa0 <UART_SetConfig+0xe50>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d03e      	beq.n	8004f9c <UART_SetConfig+0xe4c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d038      	beq.n	8004f98 <UART_SetConfig+0xe48>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d032      	beq.n	8004f94 <UART_SetConfig+0xe44>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d02c      	beq.n	8004f90 <UART_SetConfig+0xe40>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d026      	beq.n	8004f8c <UART_SetConfig+0xe3c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	d020      	beq.n	8004f88 <UART_SetConfig+0xe38>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b07      	cmp	r3, #7
 8004f4c:	d01a      	beq.n	8004f84 <UART_SetConfig+0xe34>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d014      	beq.n	8004f80 <UART_SetConfig+0xe30>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	d00e      	beq.n	8004f7c <UART_SetConfig+0xe2c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b0a      	cmp	r3, #10
 8004f64:	d008      	beq.n	8004f78 <UART_SetConfig+0xe28>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b0b      	cmp	r3, #11
 8004f6c:	d102      	bne.n	8004f74 <UART_SetConfig+0xe24>
 8004f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f72:	e016      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e014      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	e012      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f7c:	2340      	movs	r3, #64	; 0x40
 8004f7e:	e010      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f80:	2320      	movs	r3, #32
 8004f82:	e00e      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f84:	2310      	movs	r3, #16
 8004f86:	e00c      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f88:	230c      	movs	r3, #12
 8004f8a:	e00a      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f8c:	230a      	movs	r3, #10
 8004f8e:	e008      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f90:	2308      	movs	r3, #8
 8004f92:	e006      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f94:	2306      	movs	r3, #6
 8004f96:	e004      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	e002      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e000      	b.n	8004fa2 <UART_SetConfig+0xe52>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	005a      	lsls	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fbe:	e063      	b.n	8005088 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d04f      	beq.n	8005068 <UART_SetConfig+0xf18>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d048      	beq.n	8005062 <UART_SetConfig+0xf12>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d041      	beq.n	800505c <UART_SetConfig+0xf0c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d03a      	beq.n	8005056 <UART_SetConfig+0xf06>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d033      	beq.n	8005050 <UART_SetConfig+0xf00>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	d02c      	beq.n	800504a <UART_SetConfig+0xefa>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d025      	beq.n	8005044 <UART_SetConfig+0xef4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	2b07      	cmp	r3, #7
 8004ffe:	d01e      	beq.n	800503e <UART_SetConfig+0xeee>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b08      	cmp	r3, #8
 8005006:	d017      	beq.n	8005038 <UART_SetConfig+0xee8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	2b09      	cmp	r3, #9
 800500e:	d010      	beq.n	8005032 <UART_SetConfig+0xee2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	2b0a      	cmp	r3, #10
 8005016:	d009      	beq.n	800502c <UART_SetConfig+0xedc>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b0b      	cmp	r3, #11
 800501e:	d102      	bne.n	8005026 <UART_SetConfig+0xed6>
 8005020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005024:	e022      	b.n	800506c <UART_SetConfig+0xf1c>
 8005026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800502a:	e01f      	b.n	800506c <UART_SetConfig+0xf1c>
 800502c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005030:	e01c      	b.n	800506c <UART_SetConfig+0xf1c>
 8005032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005036:	e019      	b.n	800506c <UART_SetConfig+0xf1c>
 8005038:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800503c:	e016      	b.n	800506c <UART_SetConfig+0xf1c>
 800503e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005042:	e013      	b.n	800506c <UART_SetConfig+0xf1c>
 8005044:	f241 5354 	movw	r3, #5460	; 0x1554
 8005048:	e010      	b.n	800506c <UART_SetConfig+0xf1c>
 800504a:	f641 1398 	movw	r3, #6552	; 0x1998
 800504e:	e00d      	b.n	800506c <UART_SetConfig+0xf1c>
 8005050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005054:	e00a      	b.n	800506c <UART_SetConfig+0xf1c>
 8005056:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800505a:	e007      	b.n	800506c <UART_SetConfig+0xf1c>
 800505c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005060:	e004      	b.n	800506c <UART_SetConfig+0xf1c>
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	e001      	b.n	800506c <UART_SetConfig+0xf1c>
 8005068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6852      	ldr	r2, [r2, #4]
 8005070:	0852      	lsrs	r2, r2, #1
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005080:	e002      	b.n	8005088 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	76fb      	strb	r3, [r7, #27]
        break;
 8005086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b0f      	cmp	r3, #15
 800508c:	d916      	bls.n	80050bc <UART_SetConfig+0xf6c>
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d212      	bcs.n	80050bc <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f023 030f 	bic.w	r3, r3, #15
 800509e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	89fa      	ldrh	r2, [r7, #14]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	e20c      	b.n	80054d6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	76fb      	strb	r3, [r7, #27]
 80050c0:	e209      	b.n	80054d6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 80050c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	f200 81f4 	bhi.w	80054b4 <UART_SetConfig+0x1364>
 80050cc:	a201      	add	r2, pc, #4	; (adr r2, 80050d4 <UART_SetConfig+0xf84>)
 80050ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d2:	bf00      	nop
 80050d4:	08005129 	.word	0x08005129
 80050d8:	080051df 	.word	0x080051df
 80050dc:	08005295 	.word	0x08005295
 80050e0:	080054b5 	.word	0x080054b5
 80050e4:	0800533f 	.word	0x0800533f
 80050e8:	080054b5 	.word	0x080054b5
 80050ec:	080054b5 	.word	0x080054b5
 80050f0:	080054b5 	.word	0x080054b5
 80050f4:	080053f5 	.word	0x080053f5
 80050f8:	0001e848 	.word	0x0001e848
 80050fc:	01e84800 	.word	0x01e84800
 8005100:	0003d090 	.word	0x0003d090
 8005104:	0007a120 	.word	0x0007a120
 8005108:	000f4240 	.word	0x000f4240
 800510c:	001e8480 	.word	0x001e8480
 8005110:	0028b0aa 	.word	0x0028b0aa
 8005114:	0030d400 	.word	0x0030d400
 8005118:	003d0900 	.word	0x003d0900
 800511c:	00516154 	.word	0x00516154
 8005120:	007a1200 	.word	0x007a1200
 8005124:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fe f932 	bl	8003390 <HAL_RCC_GetPCLK1Freq>
 800512c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d044      	beq.n	80051c0 <UART_SetConfig+0x1070>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b01      	cmp	r3, #1
 800513c:	d03e      	beq.n	80051bc <UART_SetConfig+0x106c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b02      	cmp	r3, #2
 8005144:	d038      	beq.n	80051b8 <UART_SetConfig+0x1068>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b03      	cmp	r3, #3
 800514c:	d032      	beq.n	80051b4 <UART_SetConfig+0x1064>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b04      	cmp	r3, #4
 8005154:	d02c      	beq.n	80051b0 <UART_SetConfig+0x1060>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b05      	cmp	r3, #5
 800515c:	d026      	beq.n	80051ac <UART_SetConfig+0x105c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b06      	cmp	r3, #6
 8005164:	d020      	beq.n	80051a8 <UART_SetConfig+0x1058>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b07      	cmp	r3, #7
 800516c:	d01a      	beq.n	80051a4 <UART_SetConfig+0x1054>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b08      	cmp	r3, #8
 8005174:	d014      	beq.n	80051a0 <UART_SetConfig+0x1050>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b09      	cmp	r3, #9
 800517c:	d00e      	beq.n	800519c <UART_SetConfig+0x104c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b0a      	cmp	r3, #10
 8005184:	d008      	beq.n	8005198 <UART_SetConfig+0x1048>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b0b      	cmp	r3, #11
 800518c:	d102      	bne.n	8005194 <UART_SetConfig+0x1044>
 800518e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005192:	e016      	b.n	80051c2 <UART_SetConfig+0x1072>
 8005194:	2301      	movs	r3, #1
 8005196:	e014      	b.n	80051c2 <UART_SetConfig+0x1072>
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	e012      	b.n	80051c2 <UART_SetConfig+0x1072>
 800519c:	2340      	movs	r3, #64	; 0x40
 800519e:	e010      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051a0:	2320      	movs	r3, #32
 80051a2:	e00e      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051a4:	2310      	movs	r3, #16
 80051a6:	e00c      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051a8:	230c      	movs	r3, #12
 80051aa:	e00a      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051ac:	230a      	movs	r3, #10
 80051ae:	e008      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051b0:	2308      	movs	r3, #8
 80051b2:	e006      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051b4:	2306      	movs	r3, #6
 80051b6:	e004      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051b8:	2304      	movs	r3, #4
 80051ba:	e002      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051bc:	2302      	movs	r3, #2
 80051be:	e000      	b.n	80051c2 <UART_SetConfig+0x1072>
 80051c0:	2301      	movs	r3, #1
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	441a      	add	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	b29b      	uxth	r3, r3
 80051da:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80051dc:	e16d      	b.n	80054ba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051de:	f7fe f8ed 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80051e2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d044      	beq.n	8005276 <UART_SetConfig+0x1126>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d03e      	beq.n	8005272 <UART_SetConfig+0x1122>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d038      	beq.n	800526e <UART_SetConfig+0x111e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b03      	cmp	r3, #3
 8005202:	d032      	beq.n	800526a <UART_SetConfig+0x111a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b04      	cmp	r3, #4
 800520a:	d02c      	beq.n	8005266 <UART_SetConfig+0x1116>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b05      	cmp	r3, #5
 8005212:	d026      	beq.n	8005262 <UART_SetConfig+0x1112>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	2b06      	cmp	r3, #6
 800521a:	d020      	beq.n	800525e <UART_SetConfig+0x110e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b07      	cmp	r3, #7
 8005222:	d01a      	beq.n	800525a <UART_SetConfig+0x110a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b08      	cmp	r3, #8
 800522a:	d014      	beq.n	8005256 <UART_SetConfig+0x1106>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	2b09      	cmp	r3, #9
 8005232:	d00e      	beq.n	8005252 <UART_SetConfig+0x1102>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b0a      	cmp	r3, #10
 800523a:	d008      	beq.n	800524e <UART_SetConfig+0x10fe>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b0b      	cmp	r3, #11
 8005242:	d102      	bne.n	800524a <UART_SetConfig+0x10fa>
 8005244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005248:	e016      	b.n	8005278 <UART_SetConfig+0x1128>
 800524a:	2301      	movs	r3, #1
 800524c:	e014      	b.n	8005278 <UART_SetConfig+0x1128>
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	e012      	b.n	8005278 <UART_SetConfig+0x1128>
 8005252:	2340      	movs	r3, #64	; 0x40
 8005254:	e010      	b.n	8005278 <UART_SetConfig+0x1128>
 8005256:	2320      	movs	r3, #32
 8005258:	e00e      	b.n	8005278 <UART_SetConfig+0x1128>
 800525a:	2310      	movs	r3, #16
 800525c:	e00c      	b.n	8005278 <UART_SetConfig+0x1128>
 800525e:	230c      	movs	r3, #12
 8005260:	e00a      	b.n	8005278 <UART_SetConfig+0x1128>
 8005262:	230a      	movs	r3, #10
 8005264:	e008      	b.n	8005278 <UART_SetConfig+0x1128>
 8005266:	2308      	movs	r3, #8
 8005268:	e006      	b.n	8005278 <UART_SetConfig+0x1128>
 800526a:	2306      	movs	r3, #6
 800526c:	e004      	b.n	8005278 <UART_SetConfig+0x1128>
 800526e:	2304      	movs	r3, #4
 8005270:	e002      	b.n	8005278 <UART_SetConfig+0x1128>
 8005272:	2302      	movs	r3, #2
 8005274:	e000      	b.n	8005278 <UART_SetConfig+0x1128>
 8005276:	2301      	movs	r3, #1
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	fbb2 f2f3 	udiv	r2, r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	fbb2 f3f3 	udiv	r3, r2, r3
 800528e:	b29b      	uxth	r3, r3
 8005290:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005292:	e112      	b.n	80054ba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d044      	beq.n	8005326 <UART_SetConfig+0x11d6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d03e      	beq.n	8005322 <UART_SetConfig+0x11d2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d038      	beq.n	800531e <UART_SetConfig+0x11ce>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d032      	beq.n	800531a <UART_SetConfig+0x11ca>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d02c      	beq.n	8005316 <UART_SetConfig+0x11c6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d026      	beq.n	8005312 <UART_SetConfig+0x11c2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b06      	cmp	r3, #6
 80052ca:	d020      	beq.n	800530e <UART_SetConfig+0x11be>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2b07      	cmp	r3, #7
 80052d2:	d01a      	beq.n	800530a <UART_SetConfig+0x11ba>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d014      	beq.n	8005306 <UART_SetConfig+0x11b6>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d00e      	beq.n	8005302 <UART_SetConfig+0x11b2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	2b0a      	cmp	r3, #10
 80052ea:	d008      	beq.n	80052fe <UART_SetConfig+0x11ae>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b0b      	cmp	r3, #11
 80052f2:	d102      	bne.n	80052fa <UART_SetConfig+0x11aa>
 80052f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80052f8:	e016      	b.n	8005328 <UART_SetConfig+0x11d8>
 80052fa:	4b81      	ldr	r3, [pc, #516]	; (8005500 <UART_SetConfig+0x13b0>)
 80052fc:	e014      	b.n	8005328 <UART_SetConfig+0x11d8>
 80052fe:	4b81      	ldr	r3, [pc, #516]	; (8005504 <UART_SetConfig+0x13b4>)
 8005300:	e012      	b.n	8005328 <UART_SetConfig+0x11d8>
 8005302:	4b81      	ldr	r3, [pc, #516]	; (8005508 <UART_SetConfig+0x13b8>)
 8005304:	e010      	b.n	8005328 <UART_SetConfig+0x11d8>
 8005306:	4b81      	ldr	r3, [pc, #516]	; (800550c <UART_SetConfig+0x13bc>)
 8005308:	e00e      	b.n	8005328 <UART_SetConfig+0x11d8>
 800530a:	4b81      	ldr	r3, [pc, #516]	; (8005510 <UART_SetConfig+0x13c0>)
 800530c:	e00c      	b.n	8005328 <UART_SetConfig+0x11d8>
 800530e:	4b81      	ldr	r3, [pc, #516]	; (8005514 <UART_SetConfig+0x13c4>)
 8005310:	e00a      	b.n	8005328 <UART_SetConfig+0x11d8>
 8005312:	4b81      	ldr	r3, [pc, #516]	; (8005518 <UART_SetConfig+0x13c8>)
 8005314:	e008      	b.n	8005328 <UART_SetConfig+0x11d8>
 8005316:	4b81      	ldr	r3, [pc, #516]	; (800551c <UART_SetConfig+0x13cc>)
 8005318:	e006      	b.n	8005328 <UART_SetConfig+0x11d8>
 800531a:	4b81      	ldr	r3, [pc, #516]	; (8005520 <UART_SetConfig+0x13d0>)
 800531c:	e004      	b.n	8005328 <UART_SetConfig+0x11d8>
 800531e:	4b81      	ldr	r3, [pc, #516]	; (8005524 <UART_SetConfig+0x13d4>)
 8005320:	e002      	b.n	8005328 <UART_SetConfig+0x11d8>
 8005322:	4b81      	ldr	r3, [pc, #516]	; (8005528 <UART_SetConfig+0x13d8>)
 8005324:	e000      	b.n	8005328 <UART_SetConfig+0x11d8>
 8005326:	4b76      	ldr	r3, [pc, #472]	; (8005500 <UART_SetConfig+0x13b0>)
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6852      	ldr	r2, [r2, #4]
 800532c:	0852      	lsrs	r2, r2, #1
 800532e:	441a      	add	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800533c:	e0bd      	b.n	80054ba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7fd ff91 	bl	8003264 <HAL_RCC_GetSysClockFreq>
 8005342:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b00      	cmp	r3, #0
 800534a:	d044      	beq.n	80053d6 <UART_SetConfig+0x1286>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b01      	cmp	r3, #1
 8005352:	d03e      	beq.n	80053d2 <UART_SetConfig+0x1282>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b02      	cmp	r3, #2
 800535a:	d038      	beq.n	80053ce <UART_SetConfig+0x127e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b03      	cmp	r3, #3
 8005362:	d032      	beq.n	80053ca <UART_SetConfig+0x127a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b04      	cmp	r3, #4
 800536a:	d02c      	beq.n	80053c6 <UART_SetConfig+0x1276>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	2b05      	cmp	r3, #5
 8005372:	d026      	beq.n	80053c2 <UART_SetConfig+0x1272>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b06      	cmp	r3, #6
 800537a:	d020      	beq.n	80053be <UART_SetConfig+0x126e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b07      	cmp	r3, #7
 8005382:	d01a      	beq.n	80053ba <UART_SetConfig+0x126a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b08      	cmp	r3, #8
 800538a:	d014      	beq.n	80053b6 <UART_SetConfig+0x1266>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b09      	cmp	r3, #9
 8005392:	d00e      	beq.n	80053b2 <UART_SetConfig+0x1262>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	2b0a      	cmp	r3, #10
 800539a:	d008      	beq.n	80053ae <UART_SetConfig+0x125e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	2b0b      	cmp	r3, #11
 80053a2:	d102      	bne.n	80053aa <UART_SetConfig+0x125a>
 80053a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053a8:	e016      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e014      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	e012      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053b2:	2340      	movs	r3, #64	; 0x40
 80053b4:	e010      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053b6:	2320      	movs	r3, #32
 80053b8:	e00e      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053ba:	2310      	movs	r3, #16
 80053bc:	e00c      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053be:	230c      	movs	r3, #12
 80053c0:	e00a      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053c2:	230a      	movs	r3, #10
 80053c4:	e008      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053c6:	2308      	movs	r3, #8
 80053c8:	e006      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053ca:	2306      	movs	r3, #6
 80053cc:	e004      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053ce:	2304      	movs	r3, #4
 80053d0:	e002      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e000      	b.n	80053d8 <UART_SetConfig+0x1288>
 80053d6:	2301      	movs	r3, #1
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	fbb2 f2f3 	udiv	r2, r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80053f2:	e062      	b.n	80054ba <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d04e      	beq.n	800549a <UART_SetConfig+0x134a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d047      	beq.n	8005494 <UART_SetConfig+0x1344>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b02      	cmp	r3, #2
 800540a:	d040      	beq.n	800548e <UART_SetConfig+0x133e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b03      	cmp	r3, #3
 8005412:	d039      	beq.n	8005488 <UART_SetConfig+0x1338>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b04      	cmp	r3, #4
 800541a:	d032      	beq.n	8005482 <UART_SetConfig+0x1332>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b05      	cmp	r3, #5
 8005422:	d02b      	beq.n	800547c <UART_SetConfig+0x132c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b06      	cmp	r3, #6
 800542a:	d024      	beq.n	8005476 <UART_SetConfig+0x1326>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b07      	cmp	r3, #7
 8005432:	d01d      	beq.n	8005470 <UART_SetConfig+0x1320>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b08      	cmp	r3, #8
 800543a:	d016      	beq.n	800546a <UART_SetConfig+0x131a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	2b09      	cmp	r3, #9
 8005442:	d00f      	beq.n	8005464 <UART_SetConfig+0x1314>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2b0a      	cmp	r3, #10
 800544a:	d008      	beq.n	800545e <UART_SetConfig+0x130e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2b0b      	cmp	r3, #11
 8005452:	d101      	bne.n	8005458 <UART_SetConfig+0x1308>
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	e022      	b.n	800549e <UART_SetConfig+0x134e>
 8005458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545c:	e01f      	b.n	800549e <UART_SetConfig+0x134e>
 800545e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005462:	e01c      	b.n	800549e <UART_SetConfig+0x134e>
 8005464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005468:	e019      	b.n	800549e <UART_SetConfig+0x134e>
 800546a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800546e:	e016      	b.n	800549e <UART_SetConfig+0x134e>
 8005470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005474:	e013      	b.n	800549e <UART_SetConfig+0x134e>
 8005476:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800547a:	e010      	b.n	800549e <UART_SetConfig+0x134e>
 800547c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005480:	e00d      	b.n	800549e <UART_SetConfig+0x134e>
 8005482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005486:	e00a      	b.n	800549e <UART_SetConfig+0x134e>
 8005488:	f241 5355 	movw	r3, #5461	; 0x1555
 800548c:	e007      	b.n	800549e <UART_SetConfig+0x134e>
 800548e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005492:	e004      	b.n	800549e <UART_SetConfig+0x134e>
 8005494:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005498:	e001      	b.n	800549e <UART_SetConfig+0x134e>
 800549a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6852      	ldr	r2, [r2, #4]
 80054a2:	0852      	lsrs	r2, r2, #1
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80054b2:	e002      	b.n	80054ba <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	76fb      	strb	r3, [r7, #27]
        break;
 80054b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b0f      	cmp	r3, #15
 80054be:	d908      	bls.n	80054d2 <UART_SetConfig+0x1382>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c6:	d204      	bcs.n	80054d2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	60da      	str	r2, [r3, #12]
 80054d0:	e001      	b.n	80054d6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80054f2:	7efb      	ldrb	r3, [r7, #27]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3728      	adds	r7, #40	; 0x28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80054fe:	bf00      	nop
 8005500:	00f42400 	.word	0x00f42400
 8005504:	0001e848 	.word	0x0001e848
 8005508:	0003d090 	.word	0x0003d090
 800550c:	0007a120 	.word	0x0007a120
 8005510:	000f4240 	.word	0x000f4240
 8005514:	00145855 	.word	0x00145855
 8005518:	00186a00 	.word	0x00186a00
 800551c:	001e8480 	.word	0x001e8480
 8005520:	0028b0aa 	.word	0x0028b0aa
 8005524:	003d0900 	.word	0x003d0900
 8005528:	007a1200 	.word	0x007a1200

0800552c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01a      	beq.n	8005642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562a:	d10a      	bne.n	8005642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af02      	add	r7, sp, #8
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005680:	f7fb fb74 	bl	8000d6c <HAL_GetTick>
 8005684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d10e      	bne.n	80056b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f82c 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e022      	b.n	80056f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d10e      	bne.n	80056de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f816 	bl	8005700 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e00c      	b.n	80056f8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4613      	mov	r3, r2
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	e062      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d05e      	beq.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571a:	f7fb fb27 	bl	8000d6c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <UART_WaitOnFlagUntilTimeout+0x30>
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d11d      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800573e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e045      	b.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d02e      	beq.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005788:	d126      	bne.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005792:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057a2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0201 	bic.w	r2, r2, #1
 80057b2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e00f      	b.n	80057f8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4013      	ands	r3, r2
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	bf0c      	ite	eq
 80057e8:	2301      	moveq	r3, #1
 80057ea:	2300      	movne	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d08d      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_UARTEx_DisableFifoMode+0x16>
 8005812:	2302      	movs	r3, #2
 8005814:	e027      	b.n	8005866 <HAL_UARTEx_DisableFifoMode+0x66>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2224      	movs	r2, #36	; 0x24
 8005822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005844:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005886:	2302      	movs	r3, #2
 8005888:	e02d      	b.n	80058e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2224      	movs	r2, #36	; 0x24
 8005896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f850 	bl	800596c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005902:	2302      	movs	r3, #2
 8005904:	e02d      	b.n	8005962 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2224      	movs	r2, #36	; 0x24
 8005912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f812 	bl	800596c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005974:	4a2f      	ldr	r2, [pc, #188]	; (8005a34 <UARTEx_SetNbDataToProcess+0xc8>)
 8005976:	f107 0314 	add.w	r3, r7, #20
 800597a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800597e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005982:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <UARTEx_SetNbDataToProcess+0xcc>)
 8005984:	f107 030c 	add.w	r3, r7, #12
 8005988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800598c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059a8:	e03d      	b.n	8005a26 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059aa:	2308      	movs	r3, #8
 80059ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059ae:	2308      	movs	r3, #8
 80059b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	0e5b      	lsrs	r3, r3, #25
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	0f5b      	lsrs	r3, r3, #29
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80059d2:	7fbb      	ldrb	r3, [r7, #30]
 80059d4:	7f3a      	ldrb	r2, [r7, #28]
 80059d6:	f107 0120 	add.w	r1, r7, #32
 80059da:	440a      	add	r2, r1
 80059dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80059e0:	fb02 f303 	mul.w	r3, r2, r3
 80059e4:	7f3a      	ldrb	r2, [r7, #28]
 80059e6:	f107 0120 	add.w	r1, r7, #32
 80059ea:	440a      	add	r2, r1
 80059ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80059f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80059fc:	7ffb      	ldrb	r3, [r7, #31]
 80059fe:	7f7a      	ldrb	r2, [r7, #29]
 8005a00:	f107 0120 	add.w	r1, r7, #32
 8005a04:	440a      	add	r2, r1
 8005a06:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	7f7a      	ldrb	r2, [r7, #29]
 8005a10:	f107 0120 	add.w	r1, r7, #32
 8005a14:	440a      	add	r2, r1
 8005a16:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a26:	bf00      	nop
 8005a28:	3724      	adds	r7, #36	; 0x24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	080062cc 	.word	0x080062cc
 8005a38:	080062d4 	.word	0x080062d4

08005a3c <__errno>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	; (8005a44 <__errno+0x8>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	2000000c 	.word	0x2000000c

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4e0d      	ldr	r6, [pc, #52]	; (8005a80 <__libc_init_array+0x38>)
 8005a4c:	4c0d      	ldr	r4, [pc, #52]	; (8005a84 <__libc_init_array+0x3c>)
 8005a4e:	1ba4      	subs	r4, r4, r6
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	2500      	movs	r5, #0
 8005a54:	42a5      	cmp	r5, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	4e0b      	ldr	r6, [pc, #44]	; (8005a88 <__libc_init_array+0x40>)
 8005a5a:	4c0c      	ldr	r4, [pc, #48]	; (8005a8c <__libc_init_array+0x44>)
 8005a5c:	f000 fc26 	bl	80062ac <_init>
 8005a60:	1ba4      	subs	r4, r4, r6
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	2500      	movs	r5, #0
 8005a66:	42a5      	cmp	r5, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a70:	4798      	blx	r3
 8005a72:	3501      	adds	r5, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a7a:	4798      	blx	r3
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	08006360 	.word	0x08006360
 8005a84:	08006360 	.word	0x08006360
 8005a88:	08006360 	.word	0x08006360
 8005a8c:	08006364 	.word	0x08006364

08005a90 <memset>:
 8005a90:	4402      	add	r2, r0
 8005a92:	4603      	mov	r3, r0
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d100      	bne.n	8005a9a <memset+0xa>
 8005a98:	4770      	bx	lr
 8005a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a9e:	e7f9      	b.n	8005a94 <memset+0x4>

08005aa0 <siprintf>:
 8005aa0:	b40e      	push	{r1, r2, r3}
 8005aa2:	b500      	push	{lr}
 8005aa4:	b09c      	sub	sp, #112	; 0x70
 8005aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8005aa8:	9002      	str	r0, [sp, #8]
 8005aaa:	9006      	str	r0, [sp, #24]
 8005aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ab0:	4809      	ldr	r0, [pc, #36]	; (8005ad8 <siprintf+0x38>)
 8005ab2:	9107      	str	r1, [sp, #28]
 8005ab4:	9104      	str	r1, [sp, #16]
 8005ab6:	4909      	ldr	r1, [pc, #36]	; (8005adc <siprintf+0x3c>)
 8005ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	6800      	ldr	r0, [r0, #0]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	a902      	add	r1, sp, #8
 8005ac4:	f000 f866 	bl	8005b94 <_svfiprintf_r>
 8005ac8:	9b02      	ldr	r3, [sp, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	b01c      	add	sp, #112	; 0x70
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	4770      	bx	lr
 8005ad8:	2000000c 	.word	0x2000000c
 8005adc:	ffff0208 	.word	0xffff0208

08005ae0 <__ssputs_r>:
 8005ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	688e      	ldr	r6, [r1, #8]
 8005ae6:	429e      	cmp	r6, r3
 8005ae8:	4682      	mov	sl, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	4690      	mov	r8, r2
 8005aee:	4699      	mov	r9, r3
 8005af0:	d837      	bhi.n	8005b62 <__ssputs_r+0x82>
 8005af2:	898a      	ldrh	r2, [r1, #12]
 8005af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005af8:	d031      	beq.n	8005b5e <__ssputs_r+0x7e>
 8005afa:	6825      	ldr	r5, [r4, #0]
 8005afc:	6909      	ldr	r1, [r1, #16]
 8005afe:	1a6f      	subs	r7, r5, r1
 8005b00:	6965      	ldr	r5, [r4, #20]
 8005b02:	2302      	movs	r3, #2
 8005b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b08:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b0c:	f109 0301 	add.w	r3, r9, #1
 8005b10:	443b      	add	r3, r7
 8005b12:	429d      	cmp	r5, r3
 8005b14:	bf38      	it	cc
 8005b16:	461d      	movcc	r5, r3
 8005b18:	0553      	lsls	r3, r2, #21
 8005b1a:	d530      	bpl.n	8005b7e <__ssputs_r+0x9e>
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	f000 fb2b 	bl	8006178 <_malloc_r>
 8005b22:	4606      	mov	r6, r0
 8005b24:	b950      	cbnz	r0, 8005b3c <__ssputs_r+0x5c>
 8005b26:	230c      	movs	r3, #12
 8005b28:	f8ca 3000 	str.w	r3, [sl]
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3c:	463a      	mov	r2, r7
 8005b3e:	6921      	ldr	r1, [r4, #16]
 8005b40:	f000 faa8 	bl	8006094 <memcpy>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	6126      	str	r6, [r4, #16]
 8005b52:	6165      	str	r5, [r4, #20]
 8005b54:	443e      	add	r6, r7
 8005b56:	1bed      	subs	r5, r5, r7
 8005b58:	6026      	str	r6, [r4, #0]
 8005b5a:	60a5      	str	r5, [r4, #8]
 8005b5c:	464e      	mov	r6, r9
 8005b5e:	454e      	cmp	r6, r9
 8005b60:	d900      	bls.n	8005b64 <__ssputs_r+0x84>
 8005b62:	464e      	mov	r6, r9
 8005b64:	4632      	mov	r2, r6
 8005b66:	4641      	mov	r1, r8
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	f000 fa9e 	bl	80060aa <memmove>
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	1b9b      	subs	r3, r3, r6
 8005b72:	60a3      	str	r3, [r4, #8]
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	441e      	add	r6, r3
 8005b78:	6026      	str	r6, [r4, #0]
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	e7dc      	b.n	8005b38 <__ssputs_r+0x58>
 8005b7e:	462a      	mov	r2, r5
 8005b80:	f000 fb54 	bl	800622c <_realloc_r>
 8005b84:	4606      	mov	r6, r0
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d1e2      	bne.n	8005b50 <__ssputs_r+0x70>
 8005b8a:	6921      	ldr	r1, [r4, #16]
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	f000 faa5 	bl	80060dc <_free_r>
 8005b92:	e7c8      	b.n	8005b26 <__ssputs_r+0x46>

08005b94 <_svfiprintf_r>:
 8005b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b98:	461d      	mov	r5, r3
 8005b9a:	898b      	ldrh	r3, [r1, #12]
 8005b9c:	061f      	lsls	r7, r3, #24
 8005b9e:	b09d      	sub	sp, #116	; 0x74
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	d50f      	bpl.n	8005bc8 <_svfiprintf_r+0x34>
 8005ba8:	690b      	ldr	r3, [r1, #16]
 8005baa:	b96b      	cbnz	r3, 8005bc8 <_svfiprintf_r+0x34>
 8005bac:	2140      	movs	r1, #64	; 0x40
 8005bae:	f000 fae3 	bl	8006178 <_malloc_r>
 8005bb2:	6020      	str	r0, [r4, #0]
 8005bb4:	6120      	str	r0, [r4, #16]
 8005bb6:	b928      	cbnz	r0, 8005bc4 <_svfiprintf_r+0x30>
 8005bb8:	230c      	movs	r3, #12
 8005bba:	f8c8 3000 	str.w	r3, [r8]
 8005bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc2:	e0c8      	b.n	8005d56 <_svfiprintf_r+0x1c2>
 8005bc4:	2340      	movs	r3, #64	; 0x40
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	9309      	str	r3, [sp, #36]	; 0x24
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bd2:	2330      	movs	r3, #48	; 0x30
 8005bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bd8:	9503      	str	r5, [sp, #12]
 8005bda:	f04f 0b01 	mov.w	fp, #1
 8005bde:	4637      	mov	r7, r6
 8005be0:	463d      	mov	r5, r7
 8005be2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005be6:	b10b      	cbz	r3, 8005bec <_svfiprintf_r+0x58>
 8005be8:	2b25      	cmp	r3, #37	; 0x25
 8005bea:	d13e      	bne.n	8005c6a <_svfiprintf_r+0xd6>
 8005bec:	ebb7 0a06 	subs.w	sl, r7, r6
 8005bf0:	d00b      	beq.n	8005c0a <_svfiprintf_r+0x76>
 8005bf2:	4653      	mov	r3, sl
 8005bf4:	4632      	mov	r2, r6
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	f7ff ff71 	bl	8005ae0 <__ssputs_r>
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f000 80a4 	beq.w	8005d4c <_svfiprintf_r+0x1b8>
 8005c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c06:	4453      	add	r3, sl
 8005c08:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0a:	783b      	ldrb	r3, [r7, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 809d 	beq.w	8005d4c <_svfiprintf_r+0x1b8>
 8005c12:	2300      	movs	r3, #0
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	9307      	str	r3, [sp, #28]
 8005c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c24:	931a      	str	r3, [sp, #104]	; 0x68
 8005c26:	462f      	mov	r7, r5
 8005c28:	2205      	movs	r2, #5
 8005c2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005c2e:	4850      	ldr	r0, [pc, #320]	; (8005d70 <_svfiprintf_r+0x1dc>)
 8005c30:	f7fa fae6 	bl	8000200 <memchr>
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	b9d0      	cbnz	r0, 8005c6e <_svfiprintf_r+0xda>
 8005c38:	06d9      	lsls	r1, r3, #27
 8005c3a:	bf44      	itt	mi
 8005c3c:	2220      	movmi	r2, #32
 8005c3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c42:	071a      	lsls	r2, r3, #28
 8005c44:	bf44      	itt	mi
 8005c46:	222b      	movmi	r2, #43	; 0x2b
 8005c48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c4c:	782a      	ldrb	r2, [r5, #0]
 8005c4e:	2a2a      	cmp	r2, #42	; 0x2a
 8005c50:	d015      	beq.n	8005c7e <_svfiprintf_r+0xea>
 8005c52:	9a07      	ldr	r2, [sp, #28]
 8005c54:	462f      	mov	r7, r5
 8005c56:	2000      	movs	r0, #0
 8005c58:	250a      	movs	r5, #10
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c60:	3b30      	subs	r3, #48	; 0x30
 8005c62:	2b09      	cmp	r3, #9
 8005c64:	d94d      	bls.n	8005d02 <_svfiprintf_r+0x16e>
 8005c66:	b1b8      	cbz	r0, 8005c98 <_svfiprintf_r+0x104>
 8005c68:	e00f      	b.n	8005c8a <_svfiprintf_r+0xf6>
 8005c6a:	462f      	mov	r7, r5
 8005c6c:	e7b8      	b.n	8005be0 <_svfiprintf_r+0x4c>
 8005c6e:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <_svfiprintf_r+0x1dc>)
 8005c70:	1a80      	subs	r0, r0, r2
 8005c72:	fa0b f000 	lsl.w	r0, fp, r0
 8005c76:	4318      	orrs	r0, r3
 8005c78:	9004      	str	r0, [sp, #16]
 8005c7a:	463d      	mov	r5, r7
 8005c7c:	e7d3      	b.n	8005c26 <_svfiprintf_r+0x92>
 8005c7e:	9a03      	ldr	r2, [sp, #12]
 8005c80:	1d11      	adds	r1, r2, #4
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	9103      	str	r1, [sp, #12]
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	db01      	blt.n	8005c8e <_svfiprintf_r+0xfa>
 8005c8a:	9207      	str	r2, [sp, #28]
 8005c8c:	e004      	b.n	8005c98 <_svfiprintf_r+0x104>
 8005c8e:	4252      	negs	r2, r2
 8005c90:	f043 0302 	orr.w	r3, r3, #2
 8005c94:	9207      	str	r2, [sp, #28]
 8005c96:	9304      	str	r3, [sp, #16]
 8005c98:	783b      	ldrb	r3, [r7, #0]
 8005c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c9c:	d10c      	bne.n	8005cb8 <_svfiprintf_r+0x124>
 8005c9e:	787b      	ldrb	r3, [r7, #1]
 8005ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca2:	d133      	bne.n	8005d0c <_svfiprintf_r+0x178>
 8005ca4:	9b03      	ldr	r3, [sp, #12]
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	9203      	str	r2, [sp, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfb8      	it	lt
 8005cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cb4:	3702      	adds	r7, #2
 8005cb6:	9305      	str	r3, [sp, #20]
 8005cb8:	4d2e      	ldr	r5, [pc, #184]	; (8005d74 <_svfiprintf_r+0x1e0>)
 8005cba:	7839      	ldrb	r1, [r7, #0]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7fa fa9e 	bl	8000200 <memchr>
 8005cc4:	b138      	cbz	r0, 8005cd6 <_svfiprintf_r+0x142>
 8005cc6:	2340      	movs	r3, #64	; 0x40
 8005cc8:	1b40      	subs	r0, r0, r5
 8005cca:	fa03 f000 	lsl.w	r0, r3, r0
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	4303      	orrs	r3, r0
 8005cd2:	3701      	adds	r7, #1
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	7839      	ldrb	r1, [r7, #0]
 8005cd8:	4827      	ldr	r0, [pc, #156]	; (8005d78 <_svfiprintf_r+0x1e4>)
 8005cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cde:	2206      	movs	r2, #6
 8005ce0:	1c7e      	adds	r6, r7, #1
 8005ce2:	f7fa fa8d 	bl	8000200 <memchr>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d038      	beq.n	8005d5c <_svfiprintf_r+0x1c8>
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <_svfiprintf_r+0x1e8>)
 8005cec:	bb13      	cbnz	r3, 8005d34 <_svfiprintf_r+0x1a0>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	3307      	adds	r3, #7
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	9303      	str	r3, [sp, #12]
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	444b      	add	r3, r9
 8005cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005d00:	e76d      	b.n	8005bde <_svfiprintf_r+0x4a>
 8005d02:	fb05 3202 	mla	r2, r5, r2, r3
 8005d06:	2001      	movs	r0, #1
 8005d08:	460f      	mov	r7, r1
 8005d0a:	e7a6      	b.n	8005c5a <_svfiprintf_r+0xc6>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	3701      	adds	r7, #1
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	4619      	mov	r1, r3
 8005d14:	250a      	movs	r5, #10
 8005d16:	4638      	mov	r0, r7
 8005d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1c:	3a30      	subs	r2, #48	; 0x30
 8005d1e:	2a09      	cmp	r2, #9
 8005d20:	d903      	bls.n	8005d2a <_svfiprintf_r+0x196>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0c8      	beq.n	8005cb8 <_svfiprintf_r+0x124>
 8005d26:	9105      	str	r1, [sp, #20]
 8005d28:	e7c6      	b.n	8005cb8 <_svfiprintf_r+0x124>
 8005d2a:	fb05 2101 	mla	r1, r5, r1, r2
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4607      	mov	r7, r0
 8005d32:	e7f0      	b.n	8005d16 <_svfiprintf_r+0x182>
 8005d34:	ab03      	add	r3, sp, #12
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <_svfiprintf_r+0x1ec>)
 8005d3c:	a904      	add	r1, sp, #16
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f3af 8000 	nop.w
 8005d44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d48:	4681      	mov	r9, r0
 8005d4a:	d1d6      	bne.n	8005cfa <_svfiprintf_r+0x166>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	065b      	lsls	r3, r3, #25
 8005d50:	f53f af35 	bmi.w	8005bbe <_svfiprintf_r+0x2a>
 8005d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d56:	b01d      	add	sp, #116	; 0x74
 8005d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5c:	ab03      	add	r3, sp, #12
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4622      	mov	r2, r4
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <_svfiprintf_r+0x1ec>)
 8005d64:	a904      	add	r1, sp, #16
 8005d66:	4640      	mov	r0, r8
 8005d68:	f000 f882 	bl	8005e70 <_printf_i>
 8005d6c:	e7ea      	b.n	8005d44 <_svfiprintf_r+0x1b0>
 8005d6e:	bf00      	nop
 8005d70:	08006324 	.word	0x08006324
 8005d74:	0800632a 	.word	0x0800632a
 8005d78:	0800632e 	.word	0x0800632e
 8005d7c:	00000000 	.word	0x00000000
 8005d80:	08005ae1 	.word	0x08005ae1

08005d84 <_printf_common>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4691      	mov	r9, r2
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfb8      	it	lt
 8005d98:	4613      	movlt	r3, r2
 8005d9a:	f8c9 3000 	str.w	r3, [r9]
 8005d9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da2:	4606      	mov	r6, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	b112      	cbz	r2, 8005dae <_printf_common+0x2a>
 8005da8:	3301      	adds	r3, #1
 8005daa:	f8c9 3000 	str.w	r3, [r9]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	0699      	lsls	r1, r3, #26
 8005db2:	bf42      	ittt	mi
 8005db4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005db8:	3302      	addmi	r3, #2
 8005dba:	f8c9 3000 	strmi.w	r3, [r9]
 8005dbe:	6825      	ldr	r5, [r4, #0]
 8005dc0:	f015 0506 	ands.w	r5, r5, #6
 8005dc4:	d107      	bne.n	8005dd6 <_printf_common+0x52>
 8005dc6:	f104 0a19 	add.w	sl, r4, #25
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	42ab      	cmp	r3, r5
 8005dd4:	dc28      	bgt.n	8005e28 <_printf_common+0xa4>
 8005dd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	3300      	adds	r3, #0
 8005dde:	bf18      	it	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	0692      	lsls	r2, r2, #26
 8005de4:	d42d      	bmi.n	8005e42 <_printf_common+0xbe>
 8005de6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dea:	4639      	mov	r1, r7
 8005dec:	4630      	mov	r0, r6
 8005dee:	47c0      	blx	r8
 8005df0:	3001      	adds	r0, #1
 8005df2:	d020      	beq.n	8005e36 <_printf_common+0xb2>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	68e5      	ldr	r5, [r4, #12]
 8005df8:	f8d9 2000 	ldr.w	r2, [r9]
 8005dfc:	f003 0306 	and.w	r3, r3, #6
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	bf08      	it	eq
 8005e04:	1aad      	subeq	r5, r5, r2
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	6922      	ldr	r2, [r4, #16]
 8005e0a:	bf0c      	ite	eq
 8005e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e10:	2500      	movne	r5, #0
 8005e12:	4293      	cmp	r3, r2
 8005e14:	bfc4      	itt	gt
 8005e16:	1a9b      	subgt	r3, r3, r2
 8005e18:	18ed      	addgt	r5, r5, r3
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	341a      	adds	r4, #26
 8005e20:	454d      	cmp	r5, r9
 8005e22:	d11a      	bne.n	8005e5a <_printf_common+0xd6>
 8005e24:	2000      	movs	r0, #0
 8005e26:	e008      	b.n	8005e3a <_printf_common+0xb6>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	4630      	mov	r0, r6
 8005e30:	47c0      	blx	r8
 8005e32:	3001      	adds	r0, #1
 8005e34:	d103      	bne.n	8005e3e <_printf_common+0xba>
 8005e36:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	3501      	adds	r5, #1
 8005e40:	e7c3      	b.n	8005dca <_printf_common+0x46>
 8005e42:	18e1      	adds	r1, r4, r3
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	2030      	movs	r0, #48	; 0x30
 8005e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e4c:	4422      	add	r2, r4
 8005e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e56:	3302      	adds	r3, #2
 8005e58:	e7c5      	b.n	8005de6 <_printf_common+0x62>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	47c0      	blx	r8
 8005e64:	3001      	adds	r0, #1
 8005e66:	d0e6      	beq.n	8005e36 <_printf_common+0xb2>
 8005e68:	f109 0901 	add.w	r9, r9, #1
 8005e6c:	e7d8      	b.n	8005e20 <_printf_common+0x9c>
	...

08005e70 <_printf_i>:
 8005e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e78:	460c      	mov	r4, r1
 8005e7a:	7e09      	ldrb	r1, [r1, #24]
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	296e      	cmp	r1, #110	; 0x6e
 8005e80:	4617      	mov	r7, r2
 8005e82:	4606      	mov	r6, r0
 8005e84:	4698      	mov	r8, r3
 8005e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e88:	f000 80b3 	beq.w	8005ff2 <_printf_i+0x182>
 8005e8c:	d822      	bhi.n	8005ed4 <_printf_i+0x64>
 8005e8e:	2963      	cmp	r1, #99	; 0x63
 8005e90:	d036      	beq.n	8005f00 <_printf_i+0x90>
 8005e92:	d80a      	bhi.n	8005eaa <_printf_i+0x3a>
 8005e94:	2900      	cmp	r1, #0
 8005e96:	f000 80b9 	beq.w	800600c <_printf_i+0x19c>
 8005e9a:	2958      	cmp	r1, #88	; 0x58
 8005e9c:	f000 8083 	beq.w	8005fa6 <_printf_i+0x136>
 8005ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ea8:	e032      	b.n	8005f10 <_printf_i+0xa0>
 8005eaa:	2964      	cmp	r1, #100	; 0x64
 8005eac:	d001      	beq.n	8005eb2 <_printf_i+0x42>
 8005eae:	2969      	cmp	r1, #105	; 0x69
 8005eb0:	d1f6      	bne.n	8005ea0 <_printf_i+0x30>
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	6813      	ldr	r3, [r2, #0]
 8005eb6:	0605      	lsls	r5, r0, #24
 8005eb8:	f103 0104 	add.w	r1, r3, #4
 8005ebc:	d52a      	bpl.n	8005f14 <_printf_i+0xa4>
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6011      	str	r1, [r2, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da03      	bge.n	8005ece <_printf_i+0x5e>
 8005ec6:	222d      	movs	r2, #45	; 0x2d
 8005ec8:	425b      	negs	r3, r3
 8005eca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ece:	486f      	ldr	r0, [pc, #444]	; (800608c <_printf_i+0x21c>)
 8005ed0:	220a      	movs	r2, #10
 8005ed2:	e039      	b.n	8005f48 <_printf_i+0xd8>
 8005ed4:	2973      	cmp	r1, #115	; 0x73
 8005ed6:	f000 809d 	beq.w	8006014 <_printf_i+0x1a4>
 8005eda:	d808      	bhi.n	8005eee <_printf_i+0x7e>
 8005edc:	296f      	cmp	r1, #111	; 0x6f
 8005ede:	d020      	beq.n	8005f22 <_printf_i+0xb2>
 8005ee0:	2970      	cmp	r1, #112	; 0x70
 8005ee2:	d1dd      	bne.n	8005ea0 <_printf_i+0x30>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	f043 0320 	orr.w	r3, r3, #32
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	e003      	b.n	8005ef6 <_printf_i+0x86>
 8005eee:	2975      	cmp	r1, #117	; 0x75
 8005ef0:	d017      	beq.n	8005f22 <_printf_i+0xb2>
 8005ef2:	2978      	cmp	r1, #120	; 0x78
 8005ef4:	d1d4      	bne.n	8005ea0 <_printf_i+0x30>
 8005ef6:	2378      	movs	r3, #120	; 0x78
 8005ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005efc:	4864      	ldr	r0, [pc, #400]	; (8006090 <_printf_i+0x220>)
 8005efe:	e055      	b.n	8005fac <_printf_i+0x13c>
 8005f00:	6813      	ldr	r3, [r2, #0]
 8005f02:	1d19      	adds	r1, r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6011      	str	r1, [r2, #0]
 8005f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f10:	2301      	movs	r3, #1
 8005f12:	e08c      	b.n	800602e <_printf_i+0x1be>
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6011      	str	r1, [r2, #0]
 8005f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1c:	bf18      	it	ne
 8005f1e:	b21b      	sxthne	r3, r3
 8005f20:	e7cf      	b.n	8005ec2 <_printf_i+0x52>
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	6825      	ldr	r5, [r4, #0]
 8005f26:	1d18      	adds	r0, r3, #4
 8005f28:	6010      	str	r0, [r2, #0]
 8005f2a:	0628      	lsls	r0, r5, #24
 8005f2c:	d501      	bpl.n	8005f32 <_printf_i+0xc2>
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	e002      	b.n	8005f38 <_printf_i+0xc8>
 8005f32:	0668      	lsls	r0, r5, #25
 8005f34:	d5fb      	bpl.n	8005f2e <_printf_i+0xbe>
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	4854      	ldr	r0, [pc, #336]	; (800608c <_printf_i+0x21c>)
 8005f3a:	296f      	cmp	r1, #111	; 0x6f
 8005f3c:	bf14      	ite	ne
 8005f3e:	220a      	movne	r2, #10
 8005f40:	2208      	moveq	r2, #8
 8005f42:	2100      	movs	r1, #0
 8005f44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f48:	6865      	ldr	r5, [r4, #4]
 8005f4a:	60a5      	str	r5, [r4, #8]
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	f2c0 8095 	blt.w	800607c <_printf_i+0x20c>
 8005f52:	6821      	ldr	r1, [r4, #0]
 8005f54:	f021 0104 	bic.w	r1, r1, #4
 8005f58:	6021      	str	r1, [r4, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d13d      	bne.n	8005fda <_printf_i+0x16a>
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	f040 808e 	bne.w	8006080 <_printf_i+0x210>
 8005f64:	4665      	mov	r5, ip
 8005f66:	2a08      	cmp	r2, #8
 8005f68:	d10b      	bne.n	8005f82 <_printf_i+0x112>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	07db      	lsls	r3, r3, #31
 8005f6e:	d508      	bpl.n	8005f82 <_printf_i+0x112>
 8005f70:	6923      	ldr	r3, [r4, #16]
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	bfde      	ittt	le
 8005f78:	2330      	movle	r3, #48	; 0x30
 8005f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f82:	ebac 0305 	sub.w	r3, ip, r5
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	f8cd 8000 	str.w	r8, [sp]
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	aa03      	add	r2, sp, #12
 8005f90:	4621      	mov	r1, r4
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff fef6 	bl	8005d84 <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d14d      	bne.n	8006038 <_printf_i+0x1c8>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa0:	b005      	add	sp, #20
 8005fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	4839      	ldr	r0, [pc, #228]	; (800608c <_printf_i+0x21c>)
 8005fa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	1d1d      	adds	r5, r3, #4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6015      	str	r5, [r2, #0]
 8005fb6:	060a      	lsls	r2, r1, #24
 8005fb8:	d50b      	bpl.n	8005fd2 <_printf_i+0x162>
 8005fba:	07ca      	lsls	r2, r1, #31
 8005fbc:	bf44      	itt	mi
 8005fbe:	f041 0120 	orrmi.w	r1, r1, #32
 8005fc2:	6021      	strmi	r1, [r4, #0]
 8005fc4:	b91b      	cbnz	r3, 8005fce <_printf_i+0x15e>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	f022 0220 	bic.w	r2, r2, #32
 8005fcc:	6022      	str	r2, [r4, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	e7b7      	b.n	8005f42 <_printf_i+0xd2>
 8005fd2:	064d      	lsls	r5, r1, #25
 8005fd4:	bf48      	it	mi
 8005fd6:	b29b      	uxthmi	r3, r3
 8005fd8:	e7ef      	b.n	8005fba <_printf_i+0x14a>
 8005fda:	4665      	mov	r5, ip
 8005fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe0:	fb02 3311 	mls	r3, r2, r1, r3
 8005fe4:	5cc3      	ldrb	r3, [r0, r3]
 8005fe6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fea:	460b      	mov	r3, r1
 8005fec:	2900      	cmp	r1, #0
 8005fee:	d1f5      	bne.n	8005fdc <_printf_i+0x16c>
 8005ff0:	e7b9      	b.n	8005f66 <_printf_i+0xf6>
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	6961      	ldr	r1, [r4, #20]
 8005ff8:	1d18      	adds	r0, r3, #4
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	0628      	lsls	r0, r5, #24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	d501      	bpl.n	8006006 <_printf_i+0x196>
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	e002      	b.n	800600c <_printf_i+0x19c>
 8006006:	066a      	lsls	r2, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_printf_i+0x192>
 800600a:	8019      	strh	r1, [r3, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	4665      	mov	r5, ip
 8006012:	e7b9      	b.n	8005f88 <_printf_i+0x118>
 8006014:	6813      	ldr	r3, [r2, #0]
 8006016:	1d19      	adds	r1, r3, #4
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	681d      	ldr	r5, [r3, #0]
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	2100      	movs	r1, #0
 8006020:	4628      	mov	r0, r5
 8006022:	f7fa f8ed 	bl	8000200 <memchr>
 8006026:	b108      	cbz	r0, 800602c <_printf_i+0x1bc>
 8006028:	1b40      	subs	r0, r0, r5
 800602a:	6060      	str	r0, [r4, #4]
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2300      	movs	r3, #0
 8006032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006036:	e7a7      	b.n	8005f88 <_printf_i+0x118>
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	462a      	mov	r2, r5
 800603c:	4639      	mov	r1, r7
 800603e:	4630      	mov	r0, r6
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d0aa      	beq.n	8005f9c <_printf_i+0x12c>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	079b      	lsls	r3, r3, #30
 800604a:	d413      	bmi.n	8006074 <_printf_i+0x204>
 800604c:	68e0      	ldr	r0, [r4, #12]
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	4298      	cmp	r0, r3
 8006052:	bfb8      	it	lt
 8006054:	4618      	movlt	r0, r3
 8006056:	e7a3      	b.n	8005fa0 <_printf_i+0x130>
 8006058:	2301      	movs	r3, #1
 800605a:	464a      	mov	r2, r9
 800605c:	4639      	mov	r1, r7
 800605e:	4630      	mov	r0, r6
 8006060:	47c0      	blx	r8
 8006062:	3001      	adds	r0, #1
 8006064:	d09a      	beq.n	8005f9c <_printf_i+0x12c>
 8006066:	3501      	adds	r5, #1
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	9a03      	ldr	r2, [sp, #12]
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	42ab      	cmp	r3, r5
 8006070:	dcf2      	bgt.n	8006058 <_printf_i+0x1e8>
 8006072:	e7eb      	b.n	800604c <_printf_i+0x1dc>
 8006074:	2500      	movs	r5, #0
 8006076:	f104 0919 	add.w	r9, r4, #25
 800607a:	e7f5      	b.n	8006068 <_printf_i+0x1f8>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1ac      	bne.n	8005fda <_printf_i+0x16a>
 8006080:	7803      	ldrb	r3, [r0, #0]
 8006082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608a:	e76c      	b.n	8005f66 <_printf_i+0xf6>
 800608c:	08006335 	.word	0x08006335
 8006090:	08006346 	.word	0x08006346

08006094 <memcpy>:
 8006094:	b510      	push	{r4, lr}
 8006096:	1e43      	subs	r3, r0, #1
 8006098:	440a      	add	r2, r1
 800609a:	4291      	cmp	r1, r2
 800609c:	d100      	bne.n	80060a0 <memcpy+0xc>
 800609e:	bd10      	pop	{r4, pc}
 80060a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a8:	e7f7      	b.n	800609a <memcpy+0x6>

080060aa <memmove>:
 80060aa:	4288      	cmp	r0, r1
 80060ac:	b510      	push	{r4, lr}
 80060ae:	eb01 0302 	add.w	r3, r1, r2
 80060b2:	d807      	bhi.n	80060c4 <memmove+0x1a>
 80060b4:	1e42      	subs	r2, r0, #1
 80060b6:	4299      	cmp	r1, r3
 80060b8:	d00a      	beq.n	80060d0 <memmove+0x26>
 80060ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80060c2:	e7f8      	b.n	80060b6 <memmove+0xc>
 80060c4:	4283      	cmp	r3, r0
 80060c6:	d9f5      	bls.n	80060b4 <memmove+0xa>
 80060c8:	1881      	adds	r1, r0, r2
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	42d3      	cmn	r3, r2
 80060ce:	d100      	bne.n	80060d2 <memmove+0x28>
 80060d0:	bd10      	pop	{r4, pc}
 80060d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80060da:	e7f7      	b.n	80060cc <memmove+0x22>

080060dc <_free_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4605      	mov	r5, r0
 80060e0:	2900      	cmp	r1, #0
 80060e2:	d045      	beq.n	8006170 <_free_r+0x94>
 80060e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e8:	1f0c      	subs	r4, r1, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bfb8      	it	lt
 80060ee:	18e4      	addlt	r4, r4, r3
 80060f0:	f000 f8d2 	bl	8006298 <__malloc_lock>
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <_free_r+0x98>)
 80060f6:	6813      	ldr	r3, [r2, #0]
 80060f8:	4610      	mov	r0, r2
 80060fa:	b933      	cbnz	r3, 800610a <_free_r+0x2e>
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	6014      	str	r4, [r2, #0]
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006106:	f000 b8c8 	b.w	800629a <__malloc_unlock>
 800610a:	42a3      	cmp	r3, r4
 800610c:	d90c      	bls.n	8006128 <_free_r+0x4c>
 800610e:	6821      	ldr	r1, [r4, #0]
 8006110:	1862      	adds	r2, r4, r1
 8006112:	4293      	cmp	r3, r2
 8006114:	bf04      	itt	eq
 8006116:	681a      	ldreq	r2, [r3, #0]
 8006118:	685b      	ldreq	r3, [r3, #4]
 800611a:	6063      	str	r3, [r4, #4]
 800611c:	bf04      	itt	eq
 800611e:	1852      	addeq	r2, r2, r1
 8006120:	6022      	streq	r2, [r4, #0]
 8006122:	6004      	str	r4, [r0, #0]
 8006124:	e7ec      	b.n	8006100 <_free_r+0x24>
 8006126:	4613      	mov	r3, r2
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	b10a      	cbz	r2, 8006130 <_free_r+0x54>
 800612c:	42a2      	cmp	r2, r4
 800612e:	d9fa      	bls.n	8006126 <_free_r+0x4a>
 8006130:	6819      	ldr	r1, [r3, #0]
 8006132:	1858      	adds	r0, r3, r1
 8006134:	42a0      	cmp	r0, r4
 8006136:	d10b      	bne.n	8006150 <_free_r+0x74>
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	4401      	add	r1, r0
 800613c:	1858      	adds	r0, r3, r1
 800613e:	4282      	cmp	r2, r0
 8006140:	6019      	str	r1, [r3, #0]
 8006142:	d1dd      	bne.n	8006100 <_free_r+0x24>
 8006144:	6810      	ldr	r0, [r2, #0]
 8006146:	6852      	ldr	r2, [r2, #4]
 8006148:	605a      	str	r2, [r3, #4]
 800614a:	4401      	add	r1, r0
 800614c:	6019      	str	r1, [r3, #0]
 800614e:	e7d7      	b.n	8006100 <_free_r+0x24>
 8006150:	d902      	bls.n	8006158 <_free_r+0x7c>
 8006152:	230c      	movs	r3, #12
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	e7d3      	b.n	8006100 <_free_r+0x24>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	1821      	adds	r1, r4, r0
 800615c:	428a      	cmp	r2, r1
 800615e:	bf04      	itt	eq
 8006160:	6811      	ldreq	r1, [r2, #0]
 8006162:	6852      	ldreq	r2, [r2, #4]
 8006164:	6062      	str	r2, [r4, #4]
 8006166:	bf04      	itt	eq
 8006168:	1809      	addeq	r1, r1, r0
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	605c      	str	r4, [r3, #4]
 800616e:	e7c7      	b.n	8006100 <_free_r+0x24>
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	20000090 	.word	0x20000090

08006178 <_malloc_r>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	1ccd      	adds	r5, r1, #3
 800617c:	f025 0503 	bic.w	r5, r5, #3
 8006180:	3508      	adds	r5, #8
 8006182:	2d0c      	cmp	r5, #12
 8006184:	bf38      	it	cc
 8006186:	250c      	movcc	r5, #12
 8006188:	2d00      	cmp	r5, #0
 800618a:	4606      	mov	r6, r0
 800618c:	db01      	blt.n	8006192 <_malloc_r+0x1a>
 800618e:	42a9      	cmp	r1, r5
 8006190:	d903      	bls.n	800619a <_malloc_r+0x22>
 8006192:	230c      	movs	r3, #12
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	2000      	movs	r0, #0
 8006198:	bd70      	pop	{r4, r5, r6, pc}
 800619a:	f000 f87d 	bl	8006298 <__malloc_lock>
 800619e:	4a21      	ldr	r2, [pc, #132]	; (8006224 <_malloc_r+0xac>)
 80061a0:	6814      	ldr	r4, [r2, #0]
 80061a2:	4621      	mov	r1, r4
 80061a4:	b991      	cbnz	r1, 80061cc <_malloc_r+0x54>
 80061a6:	4c20      	ldr	r4, [pc, #128]	; (8006228 <_malloc_r+0xb0>)
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	b91b      	cbnz	r3, 80061b4 <_malloc_r+0x3c>
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 f863 	bl	8006278 <_sbrk_r>
 80061b2:	6020      	str	r0, [r4, #0]
 80061b4:	4629      	mov	r1, r5
 80061b6:	4630      	mov	r0, r6
 80061b8:	f000 f85e 	bl	8006278 <_sbrk_r>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d124      	bne.n	800620a <_malloc_r+0x92>
 80061c0:	230c      	movs	r3, #12
 80061c2:	6033      	str	r3, [r6, #0]
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f868 	bl	800629a <__malloc_unlock>
 80061ca:	e7e4      	b.n	8006196 <_malloc_r+0x1e>
 80061cc:	680b      	ldr	r3, [r1, #0]
 80061ce:	1b5b      	subs	r3, r3, r5
 80061d0:	d418      	bmi.n	8006204 <_malloc_r+0x8c>
 80061d2:	2b0b      	cmp	r3, #11
 80061d4:	d90f      	bls.n	80061f6 <_malloc_r+0x7e>
 80061d6:	600b      	str	r3, [r1, #0]
 80061d8:	50cd      	str	r5, [r1, r3]
 80061da:	18cc      	adds	r4, r1, r3
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 f85c 	bl	800629a <__malloc_unlock>
 80061e2:	f104 000b 	add.w	r0, r4, #11
 80061e6:	1d23      	adds	r3, r4, #4
 80061e8:	f020 0007 	bic.w	r0, r0, #7
 80061ec:	1ac3      	subs	r3, r0, r3
 80061ee:	d0d3      	beq.n	8006198 <_malloc_r+0x20>
 80061f0:	425a      	negs	r2, r3
 80061f2:	50e2      	str	r2, [r4, r3]
 80061f4:	e7d0      	b.n	8006198 <_malloc_r+0x20>
 80061f6:	428c      	cmp	r4, r1
 80061f8:	684b      	ldr	r3, [r1, #4]
 80061fa:	bf16      	itet	ne
 80061fc:	6063      	strne	r3, [r4, #4]
 80061fe:	6013      	streq	r3, [r2, #0]
 8006200:	460c      	movne	r4, r1
 8006202:	e7eb      	b.n	80061dc <_malloc_r+0x64>
 8006204:	460c      	mov	r4, r1
 8006206:	6849      	ldr	r1, [r1, #4]
 8006208:	e7cc      	b.n	80061a4 <_malloc_r+0x2c>
 800620a:	1cc4      	adds	r4, r0, #3
 800620c:	f024 0403 	bic.w	r4, r4, #3
 8006210:	42a0      	cmp	r0, r4
 8006212:	d005      	beq.n	8006220 <_malloc_r+0xa8>
 8006214:	1a21      	subs	r1, r4, r0
 8006216:	4630      	mov	r0, r6
 8006218:	f000 f82e 	bl	8006278 <_sbrk_r>
 800621c:	3001      	adds	r0, #1
 800621e:	d0cf      	beq.n	80061c0 <_malloc_r+0x48>
 8006220:	6025      	str	r5, [r4, #0]
 8006222:	e7db      	b.n	80061dc <_malloc_r+0x64>
 8006224:	20000090 	.word	0x20000090
 8006228:	20000094 	.word	0x20000094

0800622c <_realloc_r>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	4607      	mov	r7, r0
 8006230:	4614      	mov	r4, r2
 8006232:	460e      	mov	r6, r1
 8006234:	b921      	cbnz	r1, 8006240 <_realloc_r+0x14>
 8006236:	4611      	mov	r1, r2
 8006238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800623c:	f7ff bf9c 	b.w	8006178 <_malloc_r>
 8006240:	b922      	cbnz	r2, 800624c <_realloc_r+0x20>
 8006242:	f7ff ff4b 	bl	80060dc <_free_r>
 8006246:	4625      	mov	r5, r4
 8006248:	4628      	mov	r0, r5
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624c:	f000 f826 	bl	800629c <_malloc_usable_size_r>
 8006250:	42a0      	cmp	r0, r4
 8006252:	d20f      	bcs.n	8006274 <_realloc_r+0x48>
 8006254:	4621      	mov	r1, r4
 8006256:	4638      	mov	r0, r7
 8006258:	f7ff ff8e 	bl	8006178 <_malloc_r>
 800625c:	4605      	mov	r5, r0
 800625e:	2800      	cmp	r0, #0
 8006260:	d0f2      	beq.n	8006248 <_realloc_r+0x1c>
 8006262:	4631      	mov	r1, r6
 8006264:	4622      	mov	r2, r4
 8006266:	f7ff ff15 	bl	8006094 <memcpy>
 800626a:	4631      	mov	r1, r6
 800626c:	4638      	mov	r0, r7
 800626e:	f7ff ff35 	bl	80060dc <_free_r>
 8006272:	e7e9      	b.n	8006248 <_realloc_r+0x1c>
 8006274:	4635      	mov	r5, r6
 8006276:	e7e7      	b.n	8006248 <_realloc_r+0x1c>

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4c06      	ldr	r4, [pc, #24]	; (8006294 <_sbrk_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4605      	mov	r5, r0
 8006280:	4608      	mov	r0, r1
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	f7fa fc82 	bl	8000b8c <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	602b      	str	r3, [r5, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20000240 	.word	0x20000240

08006298 <__malloc_lock>:
 8006298:	4770      	bx	lr

0800629a <__malloc_unlock>:
 800629a:	4770      	bx	lr

0800629c <_malloc_usable_size_r>:
 800629c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a0:	1f18      	subs	r0, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfbc      	itt	lt
 80062a6:	580b      	ldrlt	r3, [r1, r0]
 80062a8:	18c0      	addlt	r0, r0, r3
 80062aa:	4770      	bx	lr

080062ac <_init>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr

080062b8 <_fini>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr
